<?xml version="1.0" encoding="utf-8"?>
<!--
	Mode8绘图助手
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="960" minHeight="510" backgroundColor="#F2F2F2" 
			   creationComplete="init(event)" currentState="draw" pageTitle="Mode8绘图助手">
	<fx:Style source="style.css"/>
	<s:states>
		<s:State name="draw"/>
		<s:State name="script"/>
	</s:states>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<!--AS3 Script-->
	<fx:Script>
		<![CDATA[
			/******************************************************************************/
			/**     总布局分为N个部分：TODO
			怎么把这么多的元素分层封装……………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………
			 * 		主函数部分							 
			 * 		图片控制部分
			 * 		层部分
			 * 		层属性编辑部分
			 * 		绘制部分
			 * 		输入输出部分
			 * 		其他显示部分																 **/
			/******************************************************************************/
			/******************************************************************************/
			/**     想到的功能备忘
			 * 1.双填充模式
			 * #2.双曲线
			 * #4.删除模式 Del按键
			 * 5.拖曳排序，
			 * #6.各种按键侦听
			 * #7.信息栏
			 * #9.帮助文档
			 * 10.导入图片转代码……
			 * #11.导入文件，输出文件
			 * 12.鼠标中心点放缩
			 * 13.画板重置位置
			 * 													 						 **/
			/******************************************************************************/
			import assets.FileHandler.*;
			import assets.layer.*;
			
			import com.millermedeiros.parsers.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.*;
			import mx.graphics.ImageSnapshot;
			import mx.managers.PopUpManager;
			
			import spark.events.*;
			import spark.utils.DataItem;
			
			public var imgFile:ImgFileHandler;
			public var txtFile:TxtFileHandler;
			public var svgFile:SvgFileHandler;
			[Bindable]public var modeList:ArrayCollection=new ArrayCollection([{label:"填充",value:0},{label:"线条",value:1}]);
			[Bindable]public var scriptModeList:ArrayCollection=new ArrayCollection([{label:"drawPath",value:0},{label:"分步",value:1}]);
			public var layerArr:Array=new Array();
			public var shapeArr:Array=new Array();
			public var commandArr:Array=new Array();
			public var coordArr:Array=new Array();
			public var memoryCommandArr:Array=new Array();
			public var memoryCoordArr:Array=new Array();
			public var mousePos:Array=[new Point(),new Point(),new Point(),new Point()];
			public var liveShape:Shape=new Shape();
			public var curveTimer:Timer=new Timer(100,1);
			public var isStepOne:Array = new Array();//曲线是第一步吗
			
			public var DelWin:DelWindow ; 
			public var isShowDelWin:Boolean = false;
			
			public var InputWin:InputWindow ; 
			public var isShowInputWin:Boolean = false;
			public var inputMode:int = 1;//本来不该声明这些全局变量的。。。TODO
			
			public var HelpWin:HelpWindow;
			public var EyeDropperToolWindow:EyeDropperTool;
			
			/******************************************************************************/
			/**                                主函数部分									 **/
			/******************************************************************************/
			public function init(e:Event):void
			{
				liveCanvas.addChild(liveShape);
				canvas.addEventListener(MouseEvent.MOUSE_WHEEL,scaleCanvas);
				addEventListener(KeyboardEvent.KEY_DOWN,KeyHandler);
			//	layerBox.addEventListener(GridSelectionEvent.CARET_CHANGE,changeLayerFocus);
			}
			//////////////////////////缩放画布///////////////////////////////////
			public function scaleCanvas(e:MouseEvent):void
			{
				if(e.delta>0 && canvas.scaleX<9.9)
				{
					trace(e.delta);
					canvas.scaleX+=0.04;imageArea.scaleX+=0.04;
					canvas.scaleY+=0.04;imageArea.scaleY+=0.04;
				}else if(e.delta<0 && canvas.scaleX>0.2)
				{
					canvas.scaleX-=0.04;imageArea.scaleX-=0.04;
					canvas.scaleY-=0.04;imageArea.scaleY-=0.04;
				}
				//scaleInfo.text="缩放比例:"+liveCanvas.scaleX.toFixed(1).toString()+"x";
			}
			////////////////////////转换绘制///////////////////////代码模式
			public function handleCurrentStateClick(event:MouseEvent):void
			{
				if(this.currentState=="draw"){this.currentState="script"}else{this.currentState="draw"}
			}
			/******************************************************************************/
			/**                                图片部分												
			 1、读取图片→详见FileHandler
			 * 显示图片 目前的整体显示图片方法 有待改进
			 2、图片alpha控制
			 3、更改背景图片缩放_滑动条时
			 4、图片拖曳控制																
			 **/
			/******************************************************************************/
			//读取图片→详见FileHandler
			public function getNewImg(event:MouseEvent):void
			{
				imgFile=new ImgFileHandler();
				this.addEventListener(Event.ENTER_FRAME,checkLoad);
			}
			//显示图片 目前的整体显示图片方法 有待改进
			public function checkLoad(event:Event):void{
				if(imgFile.isLoaded==true){
					this.removeEventListener(Event.ENTER_FRAME,checkLoad);
					image.source=imgFile.sender;image.addEventListener(Event.COMPLETE,setImage);
				}
			}
			public function setImage(event:Event):void{
				image.removeEventListener(Event.COMPLETE,setImage);
				image.height=image.sourceHeight;image.width=image.sourceWidth;
				dragImgBtn.enabled=true;imgScaleSlider.enabled=true;imgAlphaSlider.enabled=true;imgScaleBox.enabled=true;ifDragImgBox.enabled=true;
			}
			//更改背景图片缩放_滑动条时
			protected function imgScaleSliderChanged(event:Event):void
			{
				imgScaleBox.text=imgScaleSlider.value.toFixed(2);
				image.scaleX=imgScaleSlider.value;image.scaleY=image.scaleX;
			}
			//更改背景图片缩放_输入框时
			protected function imgScaleChanged(event:Event):void
			{
				var i:Number;
				if(Number(imgScaleBox.text)>=3){i=3}else if(Number(imgScaleBox.text)<=0){i=0}else{i=Number(imgScaleBox.text)}
				imgScaleBox.text=i.toFixed(2);image.scaleX=i;image.scaleY=image.scaleX;imgScaleSlider.value=image.scaleX;
			}
			//图片拖拽
			public function dragImageMouseDown(e:MouseEvent):void{
				mousePos[0] = new Point(mouseX,mouseY);
				canvasArea.addEventListener(MouseEvent.MOUSE_MOVE,dragImage);
				canvasArea.addEventListener(MouseEvent.MOUSE_UP,dragImageStop);
				canvasArea.removeEventListener(MouseEvent.MOUSE_DOWN,dragImageMouseDown);
			}
			public function dragImage(e:MouseEvent):void{
				mousePos[1] = new Point(mouseX,mouseY);
				image.x+=mousePos[1].x-mousePos[0].x;image.y+=mousePos[1].y-mousePos[0].y;
				mousePos[0] = new Point(mouseX,mouseY);
			}
			public function dragImageStop(e:MouseEvent):void{
				canvasArea.removeEventListener(MouseEvent.MOUSE_MOVE,dragImage);
				canvasArea.removeEventListener(MouseEvent.MOUSE_UP,dragImageStop);
				canvasArea.addEventListener(MouseEvent.MOUSE_DOWN,dragImageMouseDown);
			}
			public function changeHandCursor(event:MouseEvent):void{
				Mouse.cursor=MouseCursor.HAND;
			}
			public function changeBtnCursor(event:MouseEvent):void{
				Mouse.cursor=MouseCursor.BUTTON;
			}
			public function changeArrowCursor(event:MouseEvent):void{
				Mouse.cursor=MouseCursor.ARROW;
			}
			
			/******************************************************************************/
			/**                                层部分		
			 1、增加层：Fill 、Line两种mode
			 2、删除层
			 3、上移层
			 4、下移层
			 5、重置层
			 **/
			/******************************************************************************/
			//新建层
			public function createLayHandler(event:MouseEvent):void
			{
				createLayer();
			}
			protected function createLayer():void
			{
				var newLayer:layerInfo=new layerInfo(layerList.length,modeSelect.selectedIndex);
				var newLayerData:DataItem=layerInfo.createLayerData(newLayer);
				layerArr.push(newLayer);layerList.addItem(newLayerData);
				if(layerList.length==1){layerBox.selectedIndex=0}
				
				var newShape:Shape=new Shape();
				var newCommandVector:Vector.<int>=new Vector.<int>();
				var newCoordVector:Vector.<Number>=new Vector.<Number>();
				var newMemoryCommandVector:Vector.<int>=new Vector.<int>();
				var newMemoryCoordVector:Vector.<Number>=new Vector.<Number>();
				shapeArr.push(newShape);
				//~~ shapeArea.addChildAt(shapeArr[shapeArr.length-1],0);
				shapeArea.addChild(shapeArr[shapeArr.length-1]);
				commandArr.push(newCommandVector);coordArr.push(newCoordVector);
				memoryCommandArr.push(newMemoryCommandVector);memoryCoordArr.push(newMemoryCoordVector);
				
				isStepOne.push(true);
				moveBtn.enabled = true; //用一次就删除。。
				lineBtn.enabled=true;curveBtn.enabled=true;curveBtn2.enabled=true;layerBox.selectedIndex=layerList.length-1;
			}
			
			///////////////////////////删除层///////////////////////////////////////
			public function DelWinHandler(event:MouseEvent):void
			{
				showDelWin();
			}
			private function showDelWin():void
			{
				if(layerBox.selectedIndex <= -1)
					return;
				if( !isShowDelWin )
				{
					
					DelWin = DelWindow(PopUpManager.createPopUp(this, DelWindow, true));
					//				DelWin.addEventListener(CloseEvent.CLOSE, removeDelWin);
					DelWin["SureBtn"].addEventListener(MouseEvent.CLICK , SureDel);
					DelWin["countLayer"].text = "第 "+(layerBox.selectedIndex+1)+" 层：“"+layerArr[layerBox.selectedIndex]._name+"” 吗？";
				}else
				{
					delLayer();
				}
			}
			public function SureDel(e:MouseEvent):void
			{
				if(DelWin["isShowDelWin"].selected)
					isShowDelWin = !isShowDelWin;
				trace(DelWin["isShowDelWin"].selected,isShowDelWin);
				PopUpManager.removePopUp(DelWin);
				delLayer();
			}
			public function delLayer():void{
				for(var i:Number=layerList.length-1;i>-1;i--)
				{
					shapeArr[i].graphics.clear();
				}
				i=layerBox.selectedIndex;
				if(i <= -1)
					return;
				layerList.removeItemAt(i);
				layerArr.splice(i,1);
				commandArr.splice(i,1);
				isStepOne.splice(i,1);
				coordArr.splice(i,1);
				memoryCommandArr.splice(i,1);
				memoryCoordArr.splice(i,1);
				shapeArr.splice(i,1);
				layerBox.selectedIndex=layerList.length-1;
				if(layerList.length==0){
					resetState();
				}else{
					for(i=layerList.length-1;i>-1;i--){
						drawAgain(i);
					}
				//~~	layerBox.selectedIndex=0;
					//删除之后，选中的为最新层
				}
			}
			
			/////////////////////////////上移层//////////////////////////////
			public function upLayer(e:MouseEvent):void
			{
				upLayr();
			}
			public function upLayr():void
			{
				if( (layerList.length >= 2) && (layerBox.selectedIndex >= 1) )
				{
					layerArr   = layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex-1,layerArr);
					commandArr = layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex-1,commandArr);
					isStepOne = layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex-1,isStepOne);
					memoryCommandArr = layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex-1,memoryCommandArr);
					coordArr   = layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex-1,coordArr);
					memoryCoordArr   = layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex-1,memoryCoordArr);
					shapeArr   = layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex-1,shapeArr);
					
					var tempData:Object = layerList[layerBox.selectedIndex];
					layerList[layerBox.selectedIndex]=layerList[layerBox.selectedIndex-1];
					layerList[layerBox.selectedIndex-1]=tempData;
					
					trace(commandArr[layerBox.selectedIndex],commandArr[layerBox.selectedIndex-1]);
					//!!改层
					shapeArea.swapChildren(shapeArr[layerBox.selectedIndex] , shapeArr[layerBox.selectedIndex - 1]);
					layerBox.selectedIndex -= 1;
				}
			}
			
			//下移层
			public function downLayer(e:MouseEvent):void
			{
				downLayr();
			}
			public function downLayr():void
			{
				if((layerList.length>=2)&&(layerBox.selectedIndex<layerList.length-1)&&(layerBox.selectedIndex>=0)){
					layerArr=layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex+1,layerArr);
					commandArr=layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex+1,commandArr);
					isStepOne=layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex+1,isStepOne);
					memoryCommandArr=layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex+1,memoryCommandArr);
					coordArr=layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex+1,coordArr);
					memoryCoordArr=layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex+1,memoryCoordArr);
					shapeArr=layerInfo.exchange(layerBox.selectedIndex,layerBox.selectedIndex+1,shapeArr);
					
					var tempData:Object=layerList[layerBox.selectedIndex+1];
					layerList[layerBox.selectedIndex+1]=layerList[layerBox.selectedIndex];
					layerList[layerBox.selectedIndex]=tempData;
					
					shapeArea.swapChildren(shapeArr[layerBox.selectedIndex] , shapeArr[layerBox.selectedIndex + 1]);
					layerBox.selectedIndex+=1;
				}
			}
			/******************************************************************************/
			/**                                层属性编辑部分
			 1、刷新层信息显示在layerInfo
			 2、用户操作层选中被更改时的侦听
			 **/
			/******************************************************************************/
			//刷新层信息
			public function refreshLayerData(index:Number,property:String,value:Object):void{
				layerArr=layerInfo.refreshLayerData(index,property,value,layerArr);
				drawAgain(index);
			}
			//
			public function changeLayerFocus(e:Event):void
			{
				////////////////////////////////////////////////////////////////////////////////////
				var i :int = layerBox.selectedIndex;
				if(i <= -1)
					return;
					
				if(layerList.length >= 1)
				{
					if(commandArr[i].length != 0)
					{
						trace(layerBox.selectedIndex+":"+i);
						if(i >= 0)//TODO 如果没有这一步，delLayer在调试版本中会出错，访问到-1的i。报错#1010.虽然不影响实际效果。待改善
						mousePos[3] = new Point(coordArr[i][coordArr[i].length-2],coordArr[i][coordArr[i].length-1]);
					}else if(curveBtn.emphasized)
					{
						canvas.removeEventListener(MouseEvent.MOUSE_DOWN,setSecondPoint);
						canvas.addEventListener(MouseEvent.CLICK,startDrawCurve);
					}else if(curveBtn2.emphasized)
					{
						canvas.removeEventListener(MouseEvent.MOUSE_DOWN,curveDown);
						canvas.addEventListener(MouseEvent.CLICK,startDrawCurve2);
					
					}
				}
				
				if(memoryCommandArr[i].length == 0){
					redoBtn.enabled=false;
					redoBtn.removeEventListener(MouseEvent.CLICK,redoStep);
				}else{
					redoBtn.enabled=true;
					redoBtn.addEventListener(MouseEvent.CLICK,redoStep);
				}
				if(commandArr[i].length!=0){
					undoBtn.enabled=true;
					undoBtn.addEventListener(MouseEvent.CLICK,undoStep);
				}else{
					undoBtn.enabled=false;
					undoBtn.removeEventListener(MouseEvent.CLICK,undoStep);
				}
				
			//	selectInfo.text = "当前选中层 : "+(i+1).toString(); 
			}
			//层数归0后初始化(虽然觉得不用单独写出来但还是暂时这样吧)
			public function resetState():void{
				moveBtn.enabled=false;lineBtn.enabled=false;curveBtn.enabled=false;curveBtn2.enabled=false;undoBtn.enabled=false;redoBtn.enabled=false;
			}
			/******************************************************************************/
			/**                                绘制部分	
			 1、设置线条样式
			 2、直线
			 3、曲线
			 **/
			/******************************************************************************/
			//绘制
			public function delMouseHandler():void
			{
				moveBtn.emphasized=false;lineBtn.emphasized=false;curveBtn.emphasized=false;curveBtn2.emphasized=false;dragImgBtn.emphasized=false;dragBtn.emphasized=false;
				canvasArea.removeEventListener(MouseEvent.MOUSE_DOWN,dragImageMouseDown);
				canvasArea.removeEventListener(MouseEvent.MOUSE_OVER,changeHandCursor);
				canvasArea.removeEventListener(MouseEvent.MOUSE_OUT,changeArrowCursor);
				canvas.removeEventListener(MouseEvent.MOUSE_OVER,changeHandCursor);
				canvas.removeEventListener(MouseEvent.MOUSE_OUT,changeArrowCursor);
				canvas.removeEventListener(MouseEvent.MOUSE_DOWN,lineMouseDown);
				canvas.removeEventListener(MouseEvent.MOUSE_DOWN,dragCanvasDown);
				canvas.removeEventListener(MouseEvent.CLICK,startDrawCurve);
				canvas.removeEventListener(MouseEvent.MOUSE_DOWN,setSecondPoint);
				canvas.removeEventListener(MouseEvent.MOUSE_MOVE,setThirdPoint);
				canvas.removeEventListener(MouseEvent.MOUSE_UP,endDrawCurve);
				
				canvas.removeEventListener(MouseEvent.CLICK,startDrawCurve2);
				canvas.removeEventListener(MouseEvent.MOUSE_DOWN,curveDown);
				canvas.removeEventListener(MouseEvent.MOUSE_MOVE,curveMove);
				canvas.removeEventListener(MouseEvent.MOUSE_UP,curveUp);
			}
				
			public function motivateTool(e:MouseEvent):void
			{
				var boolean:Boolean=e.target.emphasized;
				delMouseHandler();
				switch(e.target.id){
					case "moveBtn":
						if(boolean==false){
							moveBtn.emphasized=true;
							canvas.addEventListener(MouseEvent.MOUSE_DOWN,lineMouseDown);
						}
						break;
					case "lineBtn":
						if(boolean==false){
							lineBtn.emphasized=true;
							canvas.addEventListener(MouseEvent.MOUSE_DOWN,lineMouseDown);
						}
						break;
					case "curveBtn":
						if(boolean==false){
							curveBtn.emphasized=true;
							if(commandArr[layerBox.selectedIndex].length!=0){
								canvas.addEventListener(MouseEvent.MOUSE_DOWN,setSecondPoint);
							}else{
								canvas.addEventListener(MouseEvent.CLICK,startDrawCurve);
							}
						}
						break;
					case "curveBtn2":
						if(boolean==false){
							curveBtn2.emphasized=true;
							if(commandArr[layerBox.selectedIndex].length!=0 || layerArr[layerBox.selectedIndex]._mode==1)
							{
								canvas.addEventListener(MouseEvent.MOUSE_DOWN,curveDown);
							}else if(layerArr[layerBox.selectedIndex]._mode==0 && commandArr[layerBox.selectedIndex].length == 0)
							{
								canvas.addEventListener(MouseEvent.CLICK,startDrawCurve2);
							}
						}
						break;
					case "dragImgBtn":
						if(boolean==false){
							dragImgBtn.emphasized=true;
							canvasArea.addEventListener(MouseEvent.MOUSE_DOWN,dragImageMouseDown);
							canvasArea.addEventListener(MouseEvent.MOUSE_OVER,changeHandCursor);
							canvasArea.addEventListener(MouseEvent.MOUSE_OUT,changeArrowCursor);
						}
						break;
					case "dragBtn":
						if(boolean==false){
							dragBtn.emphasized=true;
							canvas.addEventListener(MouseEvent.MOUSE_DOWN,dragCanvasDown);
							canvas.addEventListener(MouseEvent.MOUSE_OVER,changeHandCursor);
							canvas.addEventListener(MouseEvent.MOUSE_OUT,changeArrowCursor);
						}
						break;
				}
			}
			///////////////////////////线条样式//////////////////////////////////绘画
			public function setLineStyle(shape:Shape,index:Number):void{
				shape.graphics.lineStyle(layerArr[index]._thickness,layerArr[index]._borderColor,layerArr[index]._borderAlpha);
			}
			
			public function drawAgain(index:Number):void{
				shapeArr[index].graphics.clear();
			//	setLineStyle(shapeArr[index],index);
				if((commandArr[index].length>2 && layerArr[index]._mode==0)||(commandArr[index].length==2 && commandArr[index][1]==3 && layerArr[index]._mode==0)){
					shapeArr[index].graphics.beginFill(layerArr[index]._fillColor,layerArr[index]._fillAlpha);
				}
				 
				setLineStyle(shapeArr[index],index);
				shapeArr[index].graphics.drawPath(commandArr[index],coordArr[index],"evenOdd");
				var countCurTo :int = 0;
				for(var i:int = 0;i < commandArr[index].length; i++)
				{
					if(commandArr[index][i] == 3)
					{
						countCurTo++;
					}
					if( i!=0 &&  commandArr[index][i] == 1)
					{
						
						shapeArr[index].graphics.moveTo(coordArr[index][i*2+countCurTo*2-2],coordArr[index][i*2+countCurTo*2-1]);
						shapeArr[index].graphics.lineStyle(1,0xaaaaff,0.3);
						shapeArr[index].graphics.lineTo(coordArr[index][i*2+countCurTo*2],coordArr[index][i*2+1+countCurTo*2]);
						
					}
				}
			}
			//给我一个小圆点，我什么也不能撬动
			public function drawLastCircle(x:Number,y:Number):void
			{
				scalePoint.x = x - 2;scalePoint.y = y - 2;
			}
			
			/////////////////////////////////直线/////////////////////////////////////
			public function lineMouseDown(e:MouseEvent):void{
				
				var k :int = layerBox.selectedIndex;
				if(k <= -1)
					return;
						
				if(commandArr[k].length!=0 && layerArr[k]._mode==0)
				{
					mousePos[0] = new Point(mousePos[3].x,mousePos[3].y);
				}else{
					mousePos[0] = new Point(Math.round(e.localX),Math.round(e.localY));
				}
				drawLastCircle(mousePos[0].x,mousePos[0].y);
				canvas.addEventListener(MouseEvent.MOUSE_MOVE,lineMouseMove);
				
			}
			public function lineMouseMove(e:MouseEvent):void{
				var k :int = layerBox.selectedIndex;
				mousePos[1] = new Point(Math.round(e.localX),Math.round(e.localY));
				liveShape.graphics.clear();
				if(lineBtn.emphasized)
				{
				setLineStyle(liveShape,layerBox.selectedIndex);
				}else if(moveBtn.emphasized)
				{
					liveShape.graphics.lineStyle(layerArr[k]._thickness,0xaaaaff,0.5);
				}
				liveShape.graphics.moveTo(mousePos[0].x,mousePos[0].y);
				liveShape.graphics.lineTo(mousePos[1].x,mousePos[1].y);
				canvas.addEventListener(MouseEvent.MOUSE_UP,lineMouseUp);
				
				clearRedo(layerBox.selectedIndex);
			}
			public function lineMouseUp(e:MouseEvent):void{
				saveLine(layerBox.selectedIndex);
				canvas.removeEventListener(MouseEvent.MOUSE_UP,lineMouseUp);
				canvas.removeEventListener(MouseEvent.MOUSE_MOVE,lineMouseMove);
			}
			
			public function saveLine(index:Number):void{
				if(layerArr[index]._mode==0){
					if(commandArr[index].length==0){
						commandArr[index].push(1);
						coordArr[index].push(mousePos[0].x,mousePos[0].y);

					}
				}else if(layerArr[index]._mode==1)
				{
					commandArr[index].push(1);
					coordArr[index].push(mousePos[0].x,mousePos[0].y);
				}
				if(lineBtn.emphasized)
				{
					commandArr[index].push(2);
				}else if(moveBtn.emphasized)
				{
					commandArr[index].push(1);
				}
				coordArr[index].push(mousePos[1].x,mousePos[1].y);
				
				mousePos[3] = new Point(mousePos[1].x,mousePos[1].y);
				drawLastCircle(mousePos[3].x,mousePos[3].y);
				undoBtn.enabled=true;
				undoBtn.addEventListener(MouseEvent.CLICK,undoStep);
				
				if(redoBtn.enabled==true){
					redoBtn.enabled=false;
					redoBtn.removeEventListener(MouseEvent.CLICK,redoStep);
				}

				drawAgain(index);
				liveShape.graphics.clear();
				//trace(commandArr[layerBox.selectedIndex]);
			}
			
			////////////////////////////////曲线///////////////////////////////////
			public function startDrawCurve(e:MouseEvent):void
			{
				mousePos[0] = new Point(Math.round(e.localX),Math.round(e.localY));
				drawLastCircle(mousePos[0].x,mousePos[0].y);
				canvas.addEventListener(MouseEvent.MOUSE_DOWN,setSecondPoint);
				canvas.removeEventListener(MouseEvent.CLICK,startDrawCurve);
			}
			public function setSecondPoint(e:MouseEvent):void{
				var k:int = layerBox.selectedIndex;
				if(k <= -1)
					return;
	
				mousePos[1] = new Point(Math.round(e.localX),Math.round(e.localY));
				mousePos[2] = new Point(Math.round(e.localX),Math.round(e.localY));
				
				setLineStyle(liveShape,k);
				if(commandArr[k].length!=0 && layerArr[k]._mode==0)
									mousePos[0] = mousePos[3];
				
				liveShape.graphics.moveTo(mousePos[0].x,mousePos[0].y);
				liveShape.graphics.lineTo(mousePos[1].x,mousePos[1].y);
				
				drawLastCircle(mousePos[1].x,mousePos[1].y);
				
				canvas.removeEventListener(MouseEvent.MOUSE_DOWN,setSecondPoint);
				canvas.addEventListener(MouseEvent.MOUSE_MOVE,setThirdPoint);
			}
			
			public function setThirdPoint(e:MouseEvent):void
			{
				mousePos[2] = new Point(Math.round(e.localX),Math.round(e.localY));
				liveShape.graphics.clear();
				setLineStyle(liveShape,layerBox.selectedIndex);
				liveShape.graphics.moveTo(mousePos[0].x,mousePos[0].y);
				liveShape.graphics.curveTo((mousePos[1].x*2-mousePos[2].x),(mousePos[1].y*2-mousePos[2].y),mousePos[1].x,mousePos[1].y);
				
				liveShape.graphics.lineStyle(1,0xaaaaff,1,false,"normal",null,null);
				liveShape.graphics.moveTo(mousePos[2].x,mousePos[2].y);
				liveShape.graphics.lineTo((mousePos[1].x*2-mousePos[2].x),(mousePos[1].y*2-mousePos[2].y));
				
				drawLastCircle(mousePos[2].x,mousePos[2].y);
				drawLastCircle((mousePos[1].x*2-mousePos[2].x),(mousePos[1].y*2-mousePos[2].y));
				
				canvas.addEventListener(MouseEvent.MOUSE_UP,endDrawCurve);
				
				clearRedo(layerBox.selectedIndex);
			}
			
			public function endDrawCurve(e:MouseEvent):void{
				saveCurve();
				canvas.removeEventListener(MouseEvent.MOUSE_UP,endDrawCurve);
				canvas.removeEventListener(MouseEvent.MOUSE_MOVE,setThirdPoint);
				if(layerArr[layerBox.selectedIndex]._mode==0){
					canvas.addEventListener(MouseEvent.MOUSE_DOWN,setSecondPoint);
				}else{
					curveTimer.reset();
					curveTimer.start();
					curveTimer.addEventListener(TimerEvent.TIMER,drawNewCurve);
				}
			}
			
			public function drawNewCurve(e:TimerEvent):void{
				curveTimer.stop();
				curveTimer.removeEventListener(TimerEvent.TIMER,drawNewCurve);
				canvas.addEventListener(MouseEvent.CLICK,startDrawCurve);
			}
			
			public function saveCurve():void{
				if(layerArr[layerBox.selectedIndex]._mode==0)
				{
					if(commandArr[layerBox.selectedIndex].length == 0)
					{
						commandArr[layerBox.selectedIndex].push(1);
						coordArr[layerBox.selectedIndex].push(mousePos[0].x , mousePos[0].y);
					
					}
				}else if(layerArr[layerBox.selectedIndex]._mode == 1)
				{
					commandArr[layerBox.selectedIndex].push(1);
					coordArr[layerBox.selectedIndex].push(mousePos[0].x,mousePos[0].y);
				
				}
				commandArr[layerBox.selectedIndex].push(3);
				coordArr[layerBox.selectedIndex].push(mousePos[1].x*2-mousePos[2].x , mousePos[1].y*2-mousePos[2].y);
				coordArr[layerBox.selectedIndex].push(mousePos[1].x , mousePos[1].y);
				undoBtn.enabled=true;
				undoBtn.addEventListener(MouseEvent.CLICK,undoStep);
				if(redoBtn.enabled==true)
				{
					redoBtn.enabled=false;
					redoBtn.removeEventListener(MouseEvent.CLICK,redoStep);
				}
				
				drawAgain(layerBox.selectedIndex);
				
				mousePos[3] = mousePos[1];
				drawLastCircle(mousePos[3].x,mousePos[3].y);
				liveShape.graphics.clear();
			}
			////////////////////////////////曲线2///////////////////////////////////
			public function startDrawCurve2(e:MouseEvent):void
			{
				mousePos[0] = new Point(Math.round(e.localX),Math.round(e.localY));
				drawLastCircle(mousePos[0].x,mousePos[0].y);
				canvas.addEventListener(MouseEvent.MOUSE_DOWN,curveDown);
				canvas.removeEventListener(MouseEvent.CLICK,startDrawCurve2);
			}
			public function curveDown(e:MouseEvent):void{
				var k:int = layerBox.selectedIndex;
				if(k <= -1)
					return;
	
				if(layerArr[k]._mode == 1 && isStepOne[k] )
				{
					mousePos[0] = new Point(Math.round(e.localX),Math.round(e.localY));
					drawLastCircle(mousePos[0].x,mousePos[0].y);
				}
				canvas.removeEventListener(MouseEvent.MOUSE_DOWN,curveDown);
				canvas.addEventListener(MouseEvent.MOUSE_MOVE,curveMove);
			}
			
			public function curveMove(e:MouseEvent):void
			{
				var k:int = layerBox.selectedIndex;
				if(commandArr[k].length!=0 && layerArr[k]._mode==0)
					mousePos[0] = mousePos[3];
					if(isStepOne[k])
					{
						liveShape.graphics.clear();
						liveShape.graphics.lineStyle(1,0xaaaaff,0.5);
						mousePos[1] = new Point(Math.round(e.localX),Math.round(e.localY));
						liveShape.graphics.moveTo(mousePos[0].x,mousePos[0].y);
						liveShape.graphics.lineTo(mousePos[1].x,mousePos[1].y);
					}else
					{
						liveShape.graphics.clear();
						setLineStyle(liveShape,k);
						mousePos[2] = new Point(Math.round(e.localX),Math.round(e.localY));
						liveShape.graphics.moveTo(mousePos[0].x,mousePos[0].y);
						liveShape.graphics.curveTo(mousePos[2].x,mousePos[2].y,mousePos[1].x,mousePos[1].y);
						isStepOne[k] = false;
					}
				canvas.addEventListener(MouseEvent.MOUSE_UP,curveUp);
				clearRedo(k);
			}
			
			public function curveUp(e:MouseEvent):void
			{
				canvas.addEventListener(MouseEvent.MOUSE_DOWN,curveDown);
				if(isStepOne[layerBox.selectedIndex])
				{
					isStepOne[layerBox.selectedIndex] = false;
					liveShape.graphics.lineStyle(1,0xaaaaff,0.5);
					liveShape.graphics.moveTo(mousePos[0].x,mousePos[0].y);
					liveShape.graphics.lineTo(mousePos[1].x,mousePos[1].y);
					drawLastCircle(mousePos[1].x,mousePos[1].y);
				}else
				{
				saveCurve2();
				isStepOne[layerBox.selectedIndex] = true;
				}
				canvas.removeEventListener(MouseEvent.MOUSE_UP,curveUp);
				canvas.removeEventListener(MouseEvent.MOUSE_MOVE,curveMove);
			}
			
			public function saveCurve2():void{
				if(layerArr[layerBox.selectedIndex]._mode==0)
				{
					if(commandArr[layerBox.selectedIndex].length == 0)
					{
						commandArr[layerBox.selectedIndex].push(1);
						coordArr[layerBox.selectedIndex].push(mousePos[0].x , mousePos[0].y);
						
					}
				}else if(layerArr[layerBox.selectedIndex]._mode == 1)
				{
					commandArr[layerBox.selectedIndex].push(1);
					coordArr[layerBox.selectedIndex].push(mousePos[0].x,mousePos[0].y);
				}
				
				commandArr[layerBox.selectedIndex].push(3);
				coordArr[layerBox.selectedIndex].push(mousePos[2].x , mousePos[2].y,mousePos[1].x , mousePos[1].y);
				
				undoBtn.enabled=true;
				undoBtn.addEventListener(MouseEvent.CLICK,undoStep);
				if(redoBtn.enabled==true)
				{
					redoBtn.enabled=false;
					redoBtn.removeEventListener(MouseEvent.CLICK,redoStep);
				}
				
				drawAgain(layerBox.selectedIndex);
				
				mousePos[3] = mousePos[1];
				drawLastCircle(mousePos[3].x,mousePos[3].y);
				liveShape.graphics.clear();
				clearRedo(layerBox.selectedIndex);
			}
			/******************************************************************************/
			/**                                输入与输出部分		
			 1、输出1,2 导入导出
			 2、输入1,2
			 **/
			/******************************************************************************/
			protected function loadTxtHandler(event:MouseEvent):void
			{
				txtFile=new TxtFileHandler();
				this.addEventListener(Event.ENTER_FRAME,checkTxtLoad);
			}
			public function checkTxtLoad(event:Event):void{
				if(txtFile.isLoaded == true)
				{
					this.removeEventListener(Event.ENTER_FRAME,checkTxtLoad);
					scriptArea.text = txtFile.sender.toString();
					if(scriptArea.text == "")
						return;
					if( !isShowInputWin )
					{
						if(InputWin)
						{
						InputWin = InputWindow(PopUpManager.createPopUp(this, InputWindow, true));
						InputWin["InSureBtn"].addEventListener(MouseEvent.CLICK , InSureInput);
						}
						
					}else
					{
						inputScript();
					}
				}
			}
			//////////////////////////////加载矢量图文件//////////////////////////////////////
			protected function loadSvgHandler():void
			{
				svgFile=new SvgFileHandler();
				this.addEventListener(Event.ENTER_FRAME,checkSvgLoad);
			}
			public function checkSvgLoad(event:Event):void{
				if(svgFile.isLoaded == true)
				{
					var _loc_2:String;
					this.removeEventListener(Event.ENTER_FRAME,checkTxtLoad);
				//	scriptArea.text = svgFile.sender.toString();
					
					 var e:* = event;
					//	this._warnings.text = "";
					setTimeout(function () : void
					{
						var _loc_1:Array = SVGToMotifs.parse(svgFile.sender.toString());
						 _loc_2 = MotifsToAS3GraphicsCommands.toCommandsString(_loc_1);
						 scriptArea.text = _loc_2;
						 return; 
						//	_warnings.text = SVGToMotifs.getWarnings();
					}
						, 500);
				}
			}
			protected function saveFile(event:MouseEvent):void
			{
				var temp:String = scriptModeSelect.selectedIndex ? 
					assets.layer.scriptManager.buildText
					(
						ifNoteBox.selected,layerList.length,layerArr,commandArr,coordArr
					):
					assets.layer.scriptManager.buildText2
					(
						ifNoteBox.selected,layerList.length,layerArr,commandArr,coordArr
					);
				var re:RegExp = /\r|\n|(\r\n)|(\n\r)/g;
				temp = temp.replace(re,'\r\n');
				layerBox.selectedIndex = 0;
				var _save:FileReference=new FileReference();
				_save.save(temp,".txt");
			}
			
			/*输出文本*/
			public function outputScript(event:MouseEvent):void
			{
				trace(scriptModeSelect.selectedIndex.toString());
				
				var temp:String = scriptModeSelect.selectedIndex ? 
					assets.layer.scriptManager.buildText
					(
						ifNoteBox.selected,layerList.length,layerArr,commandArr,coordArr
					):
					assets.layer.scriptManager.buildText2
					(
						ifNoteBox.selected,layerList.length,layerArr,commandArr,coordArr
					);
				scriptArea.text = temp;
				
				if(this.currentState=="draw")
					this.currentState="script";
				
				layerBox.selectedIndex = 0;
				
			}
			public function showInputWin(event:MouseEvent):void
			{
				if(scriptArea.text == "")
					return;
				if( !isShowInputWin )
				{
					InputWin = InputWindow(PopUpManager.createPopUp(this, InputWindow, true));
					InputWin.y = (stage.stageHeight - InputWin.height)/2;
					InputWin.x = (stage.stageWidth - InputWin.width) / 2;
					InputWin["InSureBtn"].addEventListener(MouseEvent.CLICK , InSureInput);
					
				}else
				{
					inputScript();
				}
				
			}
			public function InSureInput(event:MouseEvent):void
			{
			if(InputWin["isInputSelect"].selected)
				isShowInputWin = !isShowInputWin;
			inputMode = InputWin["inputMode"].selectedIndex;
			
			PopUpManager.removePopUp(InputWin);
			
			inputScript();
			}
			public function inputScript():void
			{
				if(scriptArea.text == "")
					return;
				
				var temp:Object=scriptModeSelect.selectedIndex ? 
					assets.layer.scriptManager.inputText(scriptArea.text)
					:
					assets.layer.scriptManager.inputText2(scriptArea.text);
				
					var t:* = temp.layerArr;
				if( inputMode == 1 )//追加模式
				{
					//shapeArr = shapeArr.concat(temp.shapeArr);
					commandArr = commandArr.concat(temp.commandArr);
					coordArr = coordArr.concat(temp.coordArr);
					for(var k:int = 0; k < t.length; k++)
					{		
						var newLayer:layerInfo=new layerInfo(k,t[k]["typeMode"]);
						newLayer._fillColor = t[k]["fillColor"];
						newLayer._fillAlpha = t[k]["fillAlpha"];
						newLayer._borderColor = t[k]["lineColor"];
						newLayer._borderAlpha = t[k]["lineAlpha"];
						newLayer._thickness = t[k]["lineThick"];
						newLayer._name = t[k]["name"];
						
						var newLayerData:DataItem=layerInfo.createLayerData(newLayer);
						layerArr.push(newLayer);
						layerList.addItem(newLayerData);
					//	shapeArea.addChild(shapeArr[k]);
						var shape:Shape = temp.shapeArr[k];
						shapeArr.push(shape);
						shapeArea.addChild(shapeArr[shapeArr.length-1]);
						
						memoryCommandArr.push(new Vector.<int>());
						memoryCoordArr.push(new Vector.<Number>());
					}
				}else if( inputMode == 0 )//覆盖模式
				{
					shapeArea.removeChildren();
					shapeArr = temp.shapeArr;
					
					commandArr = temp.commandArr;
					coordArr = temp.coordArr;
					layerArr = new Array();
					layerList.removeAll();
					for(var j:int = 0; j < t.length; j++)
					{		
						var newLayer2:layerInfo=new layerInfo(j,t[j]["typeMode"]);
						newLayer2._fillColor = t[j]["fillColor"];
						newLayer2._fillAlpha = t[j]["fillAlpha"];
						newLayer2._borderColor = t[j]["lineColor"];
						newLayer2._borderAlpha = t[j]["lineAlpha"];
						newLayer2._thickness = t[j]["lineThick"];
						newLayer2._name = t[j]["name"];
						
						var newLayerData2:DataItem=layerInfo.createLayerData(newLayer2);
						layerArr.push(newLayer2);
						layerList.addItem(newLayerData2);
						
						shapeArea.addChild(shapeArr[j]);

						memoryCommandArr.push(new Vector.<int>());
						memoryCoordArr.push(new Vector.<Number>());
					}
					
				}
				//TODO 代码栏归零
				scriptArea.text = "";
				if(layerList.length >= 1)
				{
				//moveBtn.enabled = true; //用一次就删除。。
				lineBtn.enabled=true;curveBtn.enabled=true;curveBtn2.enabled=true;
				}

				if(this.currentState=="script")
					this.currentState="draw";
			}
			/******************************************************************************/
			/**                                撤销与重做部分
			 * 	
			 * memoryArr保存Arr pop掉的所有项
			 * 
			 * 							 												 **/
			/******************************************************************************/
			private function undoStep(e:MouseEvent):void
			{
				var k:int = layerBox.selectedIndex;
				undo();
				if(commandArr[k].length == 0)
				{
					undoBtn.enabled=false;
					undoBtn.removeEventListener(MouseEvent.CLICK,undoStep);
				}
				if(redoBtn.enabled==false)
				{
					redoBtn.enabled=true;
					redoBtn.addEventListener(MouseEvent.CLICK,redoStep);
				}
			}
			
			private function redoStep(e:MouseEvent):void
			{
				var k:int = layerBox.selectedIndex;
				redo();
				if(memoryCommandArr[k].length == 0)
				{
					redoBtn.enabled=false;
					redoBtn.removeEventListener(MouseEvent.CLICK,redoStep);
				}
				if(commandArr[k].length != 0)
				{
					undoBtn.enabled=true;
					undoBtn.addEventListener(MouseEvent.CLICK,undoStep);
				}
			}
			public function undo():void
			{
				var k:int = layerBox.selectedIndex;
				if(k <= -1)
					return;
				
				if(layerArr[k]._mode == 0)//如果是填充层
				{
					if(commandArr[k].length != 1)
					{
					switch(commandArr[k][ commandArr[k].length-1 ])
					{
						case 1:
							memoryCommandArr[k].push(commandArr[k][commandArr[k].length-1]);   commandArr[k].pop();
							memoryCoordArr[k] = memoryCoordArr[k].concat( coordArr[k].slice(-2));         coordArr[k].splice( -2 , 2 );
							break;
						case 2:
							memoryCommandArr[k].push(commandArr[k][commandArr[k].length-1]);   commandArr[k].pop();
							memoryCoordArr[k] = memoryCoordArr[k].concat( coordArr[k].slice(-2));         coordArr[k].splice( -2 , 2 );
							break;
						case 3:
							memoryCommandArr[k].push(commandArr[k][commandArr[k].length-1]);   commandArr[k].pop();
							memoryCoordArr[k] = memoryCoordArr[k].concat( coordArr[k].slice(-4));  
							coordArr[k].splice( -4 , 4 );
							break;
					}
					}
					if(commandArr[k].length == 1 && commandArr[k][commandArr[k].length-1] == 1)//这条应该是判定如果是第一条画线
					{
						memoryCommandArr[k].push(commandArr[k][commandArr[k].length-1]);   commandArr[k].pop();
						memoryCoordArr[k] = memoryCoordArr[k].concat( coordArr[k].slice(-2));        coordArr[k].splice( -2 , 2 );
					}
				}else if(layerArr[k]._mode == 1)
				{
					switch(commandArr[k][commandArr[k].length - 1])
					{
						case 2:
							memoryCoordArr[k] = memoryCoordArr[k].concat( coordArr[k].slice(-4));  
							coordArr[k].splice( -4 , 4 );
							break;
						case 3:
							memoryCoordArr[k] = memoryCoordArr[k].concat( coordArr[k].slice(-6));  
							coordArr[k].splice( -6 , 6 );
							break;
					}
					
					memoryCommandArr[k].push( commandArr[k][commandArr[k].length-2] , commandArr[k][commandArr[k].length-1] );   
					commandArr[k].pop();			commandArr[k].pop();
				}
				if(commandArr[k].length == 0)
				{
					shapeArr[k].graphics.clear();
					mousePos[3] = new Point(NaN,NaN);
				}else{
					drawAgain(k);
					mousePos[3] = new Point(coordArr[k][coordArr[k].length-2],coordArr[k][coordArr[k].length-1]);
				}
			}
			public function redo():void
			{
				var k:int = layerBox.selectedIndex;
				if(k <= -1)
					return;
				if(memoryCommandArr[k].length == 0)
					return;
				trace(memoryCommandArr[k].length+":memoryCommandArr[k].length");
				if(layerArr[k]._mode == 0)
				{
					trace("layerArr[k]._mode == 0");
					if(memoryCommandArr[k].length == 1 && memoryCommandArr[k][ memoryCommandArr[k].length - 1 ] == 1)
					{
						trace("memoryCommandArr[k].length:"+memoryCommandArr[k].length);
						commandArr[k].push(memoryCommandArr[k][memoryCommandArr[k].length-1]);   	memoryCommandArr[k].pop();
						coordArr[k] = coordArr[k].concat( memoryCoordArr[k].slice(-2) );    	 	memoryCoordArr[k].splice( -2 , 2 );
					}
					if(memoryCommandArr[k].length >= 1)
					{
					switch(memoryCommandArr[k][ memoryCommandArr[k].length - 1 ])
					{
						case 1:
							trace("这？？？怎么可能是 1");
							commandArr[k].push(memoryCommandArr[k][memoryCommandArr[k].length-1]);   memoryCommandArr[k].pop();
							coordArr[k] = coordArr[k].concat( memoryCoordArr[k].slice(-2) );    	 memoryCoordArr[k].splice( -2 , 2 );
							break;
						case 2:
							commandArr[k].push(memoryCommandArr[k][memoryCommandArr[k].length-1]);   memoryCommandArr[k].pop();
							coordArr[k] = coordArr[k].concat( memoryCoordArr[k].slice(-2) );    	 memoryCoordArr[k].splice( -2 , 2 );
							break;
						case 3:
							commandArr[k].push(memoryCommandArr[k][memoryCommandArr[k].length-1]);   memoryCommandArr[k].pop();
							coordArr[k] = coordArr[k].concat( memoryCoordArr[k].slice(-4));  		 memoryCoordArr[k].splice( -4 , 4 );
							break;
					}
					}
				}else if(layerArr[k]._mode == 1)
				{
					switch(memoryCommandArr[k][ memoryCommandArr[k].length-1 ])
					{
						case 2:
							coordArr[k] = coordArr[k].concat( memoryCoordArr[k].slice(-4));  
							memoryCoordArr[k].splice( -4 , 4 );
							break;
						case 3:
							coordArr[k] = coordArr[k].concat( memoryCoordArr[k].slice(-6));  
							memoryCoordArr[k].splice( -6 , 6 );
							break;
					}
					commandArr[k].push( memoryCommandArr[k][memoryCommandArr[k].length-2] , memoryCommandArr[k][memoryCommandArr[k].length-1] );   
					memoryCommandArr[k].pop();			memoryCommandArr[k].pop();
				}
				drawAgain(k);
				mousePos[3] = new Point( coordArr[k][coordArr[k].length-2] , coordArr[k][coordArr[k].length-1] );
			}
			private function clearRedo(index:int):void
			{
				memoryCommandArr[index] = new Vector.<int>();
				memoryCoordArr[index] = new Vector.<Number>();
			}
			/******************************************************************************/
			/**                                按键部分		
			 1、
			 2、
			 **/
			/******************************************************************************/
			 //http://blog.csdn.net/txiejun/article/details/4861257
			private function maskInput():Boolean 
			{ 
				var focusObj:Object = Object(focusManager.getFocus()); 
				var focusName:String = focusObj.className; 
				if(focusName=="TextArea"||focusName=="TextInput") 
				{ 
					if(focusObj.editable==true) 
					{ 
						return true; 
					} 
				} 
				return false; 
			}
			public function KeyHandler(e:KeyboardEvent):void
			{
				if(maskInput()) 
				{ 
					return ; 
				} 
				var k:int = layerBox.selectedIndex;
				if( !e.ctrlKey)
				{
				switch(e.keyCode)
				{
					case Keyboard.Z://bu直线工具
						delMouseHandler();
						if(moveBtn.emphasized == false){moveBtn.emphasized=true;
							canvas.addEventListener(MouseEvent.MOUSE_DOWN,lineMouseDown);}break;
				case Keyboard.X://直线工具
					delMouseHandler();
					if(lineBtn.emphasized == false){lineBtn.emphasized=true;
						canvas.addEventListener(MouseEvent.MOUSE_DOWN,lineMouseDown);}break;
				
				case Keyboard.C://曲线工具1
					delMouseHandler();
					if(curveBtn.emphasized ==false){curveBtn.emphasized=true;
						if(commandArr[layerBox.selectedIndex].length!=0){
							canvas.addEventListener(MouseEvent.MOUSE_DOWN,setSecondPoint);
						}else{canvas.addEventListener(MouseEvent.CLICK,startDrawCurve);}}break;
				
				case Keyboard.V://曲线工具2
					delMouseHandler();
					if(curveBtn2.emphasized ==false){
						curveBtn2.emphasized=true;
						if(commandArr[layerBox.selectedIndex].length!=0 || layerArr[layerBox.selectedIndex]._mode==1)
						{	canvas.addEventListener(MouseEvent.MOUSE_DOWN,curveDown);
						}else if(layerArr[layerBox.selectedIndex]._mode==0 && commandArr[layerBox.selectedIndex].length == 0)
						{canvas.addEventListener(MouseEvent.CLICK,startDrawCurve2);}}	break;
				case Keyboard.D://抓手工具
					if(dragBtn.emphasized)
					{
						dragBtn.emphasized = false;
						canvas.removeEventListener(MouseEvent.MOUSE_MOVE,dragCanvasMove);
						canvas.removeEventListener(MouseEvent.MOUSE_UP,dragCanvasStop);
						canvas.removeEventListener(MouseEvent.MOUSE_OUT,dragCanvasStop);
						delMouseHandler();
						Mouse.cursor=MouseCursor.ARROW;
						break;
					}
					delMouseHandler();
					if(dragBtn.emphasized==false){dragBtn.emphasized=true;
					canvas.addEventListener(MouseEvent.MOUSE_DOWN,dragCanvasDown);
					canvas.addEventListener(MouseEvent.MOUSE_OVER,changeHandCursor);
					canvas.addEventListener(MouseEvent.MOUSE_OUT,changeArrowCursor);}break;	
				case Keyboard.DELETE:
					showDelWin();break;
				case Keyboard.TAB:
					if(this.currentState=="draw"){this.currentState="script"}else{this.currentState="draw"};
					break;
				case Keyboard.ESCAPE:
					//clearColorPick();
					EyeDropperToolWindow["disappearFade"].play();
					break;
				case Keyboard.Q:
					beginGetColor();
					break;
				case Keyboard.E:
					loadSvgHandler();break;
				case Keyboard.N://新建层
					createLayer();break;
				}
				}
				if(e.ctrlKey )
				{
					switch(e.keyCode)
					{
						case Keyboard.Z://撤销
							if(undoBtn.enabled)
							{
								undo();
								if(commandArr[k].length == 0)
								{
									undoBtn.enabled=false;
									undoBtn.removeEventListener(MouseEvent.CLICK,undoStep);
								}
								if(redoBtn.enabled==false)
								{
									redoBtn.enabled=true;
									redoBtn.addEventListener(MouseEvent.CLICK,redoStep);
								}
							}
							break;
						case Keyboard.Y://重做
							
							if(redoBtn.enabled)
							{
								redo();
								if(memoryCommandArr[k].length == 0)
								{
									redoBtn.enabled=false;
									redoBtn.removeEventListener(MouseEvent.CLICK,redoStep);
								}
								if(commandArr[k].length != 0)
								{
									undoBtn.enabled=true;
									undoBtn.addEventListener(MouseEvent.CLICK,undoStep);
								}
							}break;
						case Keyboard.UP://
							upLayr();break;
						case Keyboard.DOWN://
							downLayr();break;
					}
				}
			}
			
			/******************************************************************************/
			/**                                其他功能部分		
			
			~ 1、坐标信息
			 2、画布拖拽与缩放
			 * 3.更改背景色
			 **/
			/******************************************************************************/
			//拖拽画布
			public function dragCanvasDown(e:MouseEvent):void
			{	
			//	mousePos[0].x=mouseX;mousePos[0].y=mouseY;
				mousePos[0] = new Point(mouseX,mouseY);
				canvas.addEventListener(MouseEvent.MOUSE_MOVE,dragCanvasMove);
				canvas.addEventListener(MouseEvent.MOUSE_UP,dragCanvasStop);
				canvas.addEventListener(MouseEvent.MOUSE_OUT,dragCanvasStop);
			}
			public function dragCanvasMove(e:MouseEvent):void
			{
				mousePos[1] = new Point(mouseX,mouseY);
				var x:Number=mousePos[1].x-mousePos[0].x;var y:Number=mousePos[1].y-mousePos[0].y;
				canvas.x+=Math.round(x);
				canvas.y+=Math.round(y);
				if(ifDragImgBox.selected==true){
					imageArea.x+=x;
					imageArea.y+=y;
				}
				mousePos[0] = new Point(mouseX,mouseY);
			}
			public function dragCanvasStop(e:MouseEvent):void{
				canvas.removeEventListener(MouseEvent.MOUSE_MOVE,dragCanvasMove);
				canvas.removeEventListener(MouseEvent.MOUSE_UP,dragCanvasStop);
				canvas.removeEventListener(MouseEvent.MOUSE_OUT,dragCanvasStop);
			}
			
			/////////////////////////////更改背景色///////////////////////////////////
			public function backGroundColor():void{
				bckColor.color = bckColorR.value << 16 | bckColorG.value << 8 | bckColorB.value;
			}
			
			private function GridIndex(oItem:Object,iCol:int):String    
			{   
				var iIndex:int = layerBox.dataProvider.getItemIndex(oItem) + 1; 
				return String(iIndex);     
			}
			protected function mouseInfo(event:MouseEvent):void
			{
				posInfo.text = "坐标信息:("+Math.round(event.localX).toString()+","+Math.round(event.localY).toString()+")";
			}
			
			protected function selectInfo_enterFrameHandler(event:Event):void
			{
				selectInfo.text = "当前选中层 : "+(layerBox.selectedIndex == -1?"无":layerBox.selectedIndex+1).toString(); 
			}
			
			protected function toolInfo_enterFrameHandler(event:Event):void
			{
				var toolname :String ;
				if(lineBtn.emphasized){toolname = "直线工具";}
				else if(moveBtn.emphasized){toolname = "不可见直线工具";}
				else if(curveBtn.emphasized){toolname = "曲线工具1";}
				else if(curveBtn2.emphasized){toolname = "曲线工具2";}
				else if(dragBtn.emphasized){if(ifDragImgBox.selected){toolname = "画步拖曳";}else{toolname = "画步拖曳(图片静止)";}}
				else if(dragImgBtn.emphasized){toolname = "图片调整";}
				toolInfo.text = "当前工具 : "+ toolname;	
			}
			
			protected function help_clickHandler(event:MouseEvent):void
			{
				HelpWin = HelpWindow(PopUpManager.createPopUp(this.parent, HelpWindow, true));
				PopUpManager.centerPopUp(HelpWin);
			}
			////////////////////////双击取色////////////////////////////////////
			////////////////////////双击取色////////////////////////////////////
			public function beginGetColor():void
			{
				EyeDropperToolWindow = EyeDropperTool(PopUpManager.createPopUp(this.parent, EyeDropperTool, true));
				PopUpManager.centerPopUp(EyeDropperToolWindow);
				EyeDropperToolWindow.loadImage(ImageSnapshot.captureBitmapData(imagePick));
				EyeDropperToolWindow["capImg"].addEventListener(MouseEvent.CLICK,colorChanged);
			}
			
			private function colorChanged(e:MouseEvent):void
			{
				if(layerBox.selectedIndex >= 0 && layerList.length >= 1)
				{
					layerList[layerBox.selectedIndex].fillColor=EyeDropperToolWindow.color;
					refreshLayerData(layerBox.selectedIndex,"fillColor",EyeDropperToolWindow.color);
				}
				EyeDropperToolWindow.capImg.removeEventListener(MouseEvent.CLICK,colorChanged);
				EyeDropperToolWindow.titleWinClose();
			}
		]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor id="bckColor" color="0xfbfbfb" alpha="1.0"/>
		</s:fill>
	</s:Rect>
	<!--画布区遮罩 保证只在画布内显示画布内容-->
	<s:Group id="canvasMask" left="10" right="350" top="54" bottom="12" visible.script="false">
		<s:Rect height="100%" width="100%"  >
			<s:fill>
				<s:SolidColor color="0"/>
			</s:fill>
		</s:Rect>
	</s:Group>
	<!--画布-->
	<s:Group id="canvasArea" left="10" right="350" top="54" bottom="12" mask="{canvasMask}"
			 chromeColor="#FBFBFB"
			 visible.script="false">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xfbfbfb"/>
			</s:fill>
		</s:Rect>
		<s:Group id="imageArea" x="30" y="30"><!--图片区域依旧需要嵌套一个外壳 以对应单一调整图片和整体调整画布的需求-->
			<s:Group id="imagePick">
			<s:Image id="image" x="0" y="0" width="100" height="100" scaleMode="letterbox" smooth="true"
					 smoothingQuality="high" clearOnLoad="true" fillMode="clip" alpha="{imgAlphaSlider.value}"/>
			</s:Group>
		</s:Group>
		<s:Group x="30" y="30" blendMode="difference">
			<mx:HRule left="-4" width="10"/>
			<mx:VRule top="-4" height="10"/>
		</s:Group>
		<s:Group x="30" y="30"
				 chromeColor="#Fbfbfb" contentBackgroundColor="#Fbfbfb">
			<s:Group id="canvas" x="0" y="0"
					 mouseMove.draw="mouseInfo(event)">
				<s:Rect x="-10000" y="-10000" width="20000" height="20000" alpha="0">
					<s:fill>
						<s:SolidColor color="0xfbfbfb"/>
					</s:fill>
				</s:Rect>
				<mx:UIComponent id="shapeArea" x="0" y="0"/>
				<mx:UIComponent id="liveCanvas" x="0" y="0"/>
				<s:Ellipse id="scalePoint" visible="true" x="0" y="0" width="4" height="4" alpha="0.5" blendMode="difference">
					<s:stroke>
						<s:SolidColorStroke color="0xa0d5f6" weight="1"/>
					</s:stroke>
				</s:Ellipse>

				<s:Group id="canvasBorder" x="0" y="0" width="{Number(canvasBorderWidth.text)}" 
						 height="{Number(canvasBorderHeight.text)}" enabled="false" blendMode="difference">
					<mx:HRule left="0" top="0" width="100%"  strokeColor="0x000000" />
					<mx:HRule left="0" bottom="0" width="100%"  strokeColor="0x000000" />
					<mx:VRule left="0" top="0" height="100%"  strokeColor="0x000000" />
					<mx:VRule right="0" top="0" height="100%" strokeColor="0x000000" />
				</s:Group>
				<!--锁定播放器播放窗口大小 可以考虑弄一个16:9的框来服务宽屏模式 现实验室中可以更改大小-->
			</s:Group>
		</s:Group>
	</s:Group>
	<!--用4个Rule工具做了边框 因为使用BorderContainer与其他元件有重合的时候边框会不明所以的消失 所以取此下策-->
	<mx:HRule left="10" right="350" top="54" strokeColor="0x000000" shadowColor="0x000000" visible.script="false"/>
	<mx:HRule left="10" right="350" bottom="12" strokeColor="0x000000" shadowColor="0x000000" visible.script="false"/>
	<mx:VRule left="10" top="54" bottom="12" strokeColor="0x000000" shadowColor="0x000000" visible.script="false"/>
	<mx:VRule right="350" bottom="12" top="54" strokeColor="0x000000" shadowColor="0x000000" visible.script="false"/>
	
	<!--文本区-->
	<s:TextArea id="scriptArea" left="10" right="350" top="54" bottom="12"
				visible.draw="false"
				left.script="10" right.script="350" top.script="76" bottom.script="10"/>
	<s:Button id="copyBtn" includeIn="script" x="10" y="48" width="113" height="25" label="复制到剪切板"
			  click="System.setClipboard(scriptArea.text)"/>
	<s:Button includeIn="script" x="131" y="48" width="91" height="25" label="清除"
			  click="scriptArea.text=''"/>
	<!--信息区-->
	<s:Group id="infoBox" left="10" right="350" top="10" height="34">
		<s:BorderContainer width="100%" height="100%" enabled="false"/>
		<s:Label id="posInfo" includeIn="draw" y="9" right="120" fontFamily="微软雅黑" fontSize="16"
				 text="坐标信息:"/>
		<s:Label id="selectInfo" y="9" left="10"
				 enterFrame="selectInfo_enterFrameHandler(event)" fontFamily="微软雅黑"
				 fontSize="16" text="当前选中层 : "/>
		<s:Label id="toolInfo" y="9" left="127"
				 enterFrame="toolInfo_enterFrameHandler(event)" fontFamily="微软雅黑" fontSize="16"
				 text="当前工具 : "/>
		<s:Label id="helpInfo" y="9" right="10" click="help_clickHandler(event)"
				 fontFamily="微软雅黑" fontLookup="auto" fontSize="16"
				 mouseOut="changeArrowCursor(event)" mouseOver="changeBtnCursor(event)"
				 text="显示帮助信息"/>
	</s:Group>
	<!--工具区选项卡-->
	<s:TabBar id="toolBoxBar" right="10" top="10" width="330" height="20" dataProvider="{toolBox}" focusColor="#A0D5F6" fontFamily="微软雅黑"
			  fontSize="12"/>
	<!--工具区选项卡内容-->
	<s:BorderContainer right="10" top="28" width="330" height="280"
					   backgroundColor="#FBFBFB">
		<mx:ViewStack id="toolBox" width="100%" height="100%" creationPolicy="all">
			<s:NavigatorContent width="100%" height="100%" label="工具区">
				<s:Label x="10" y="9" text="图片工具" fontFamily="微软雅黑" fontSize="12"/>
				<mx:HRule x="10" y="24" width="60%"/>
				<s:Button id="loadImgBtn" x="10" y="30" width="30" height="30" label="加载图片"
						  click="getNewImg(event)" fontFamily="微软雅黑" fontSize="12"
						  icon="assets/buttonUI/white/loadImgBtn.png"/>
				<s:Button id="dragImgBtn" x="45" y="30" width="30" height="30" label="移动图片" enabled="false"
						  fontFamily="微软雅黑" fontSize="12" icon="assets/buttonUI/white/dragImgBtn.png" click="motivateTool(event)"/>
				<s:HSlider id="imgScaleSlider" x="185" y="49" width="100" liveDragging="true" enabled="false"
						   maximum="3.0" minimum="0" stepSize="0.01" value="1" change="imgScaleSliderChanged(event)"/>
				<s:HSlider id="imgAlphaSlider" x="80" y="49" width="100" liveDragging="true" enabled="false"
						   maximum="1.0" minimum="0" stepSize="0.01" value="1"/>
				<s:TextInput id="imgScaleBox" x="257" y="32" width="30" height="15" enabled="false"
							 borderVisible="false" fontFamily="微软雅黑" fontSize="12" paddingBottom="2"
							 paddingLeft="2" paddingRight="2" paddingTop="2" text="1.00" enter="imgScaleChanged(event)"
							 restrict="0123456789." maxChars="4"/>
				<s:Label x="81" y="33" fontFamily="微软雅黑" fontSize="12" text="图片Alpha"/>
				<s:Label x="184" y="33" fontFamily="微软雅黑" fontSize="12" text="图片缩放"/>
				<s:Label x="10" y="70" text="绘制工具" fontFamily="微软雅黑" fontSize="12"/>
				<mx:HRule x="10" y="85" width="60%"/>
				<s:Button id="moveBtn" x="10" y="91" width="30" height="30"
						  label="不可见直线工具" click="motivateTool(event)" enabled="false" fontFamily="微软雅黑"
						  fontSize="12" icon="assets/buttonUI/white/moveBtn.png"
						  toolTip="不可见直线工具&#13;快捷键Z"/>
				<s:Button id="lineBtn" x="43" y="91" width="30" height="30" label="直线工具"
						  click="motivateTool(event)" enabled="false" fontFamily="微软雅黑"
						  fontSize="12" icon="assets/buttonUI/white/lineBtn.png"
						  toolTip="直线工具&#13;快捷键X"/>
				<s:Button id="curveBtn" x="78" y="91" width="30" height="30" 
						  click="motivateTool(event)" enabled="false" fontFamily="微软雅黑"
						  fontSize="12" icon="assets/buttonUI/white/curveBtn.png"
						  label="曲线工具1" toolTip="曲线工具1&#13;快捷键C"/>
				<s:Button id="curveBtn2" x="112" y="91" width="30" height="30" 
						  click="motivateTool(event)" enabled="false" fontFamily="微软雅黑"
						  fontSize="12" icon="assets/buttonUI/white/curveBtn2.png"
						  label="曲线工具2" toolTip="曲线工具2&#13;快捷键V"/>
				<s:Button id="dragBtn" width="30" height="30" label="抓手工具"
						  click="motivateTool(event)" enabled="true" fontFamily="微软雅黑" fontSize="12"
						  icon="assets/buttonUI/white/dragBtn.png"
						  x="146" y="91" toolTip="画布调整&#13;快捷键D"
						  enabled.script="false"/>
				<s:Button id="undoBtn" width="30" height="30" label="撤销"
						  enabled="false" fontFamily="微软雅黑" fontSize="12" icon="assets/buttonUI/white/undoBtn.png"
						  x="181" y="91" toolTip="撤销&#13;快捷键Ctrl+Z"/>
				<s:Button id="redoBtn" width="30" height="30" label="重做"
						  enabled="false" fontFamily="微软雅黑" fontSize="12" icon="assets/buttonUI/white/redoBtn.png"
						  x="215" y="91" toolTip="重做&#13;快捷键Ctrl+Y"/>
				<s:CheckBox id="ifDragImgBox" label="图片随画布拖动" enabled="false"
							fontFamily="微软雅黑" fontSize="11" layoutDirection="rtl" selected="true"
							x="223" y="124" toolTip="图片随画布拖动"/>
				<s:Label x="10" y="131" text="其他" fontFamily="微软雅黑" fontSize="12"/>
				<mx:HRule x="10" y="146" width="60%"/>
				<s:Button id="saveScriptBtn" x="10" y="152" width="30" height="30" label="保存文本"
						  fontFamily="微软雅黑" fontSize="12" icon="assets/buttonUI/white/saveScriptBtn.png"
						  click="saveFile(event)"/>
				<s:Button id="loadsaveScriptBtn" x="45" y="152" width="30" height="30" label="读取文本"
						  click="loadTxtHandler(event)" fontFamily="微软雅黑" fontSize="12" doubleClickEnabled="true"
						  icon="assets/buttonUI/white/loadScriptBtn.png"
						  doubleClick="loadSvgHandler()"/>
				<s:Button id="changeStateBtn" x="80" y="152" width="30" height="30" label="切换绘制/代码&#13;快捷键Tab"
						  click="handleCurrentStateClick(event)" fontFamily="微软雅黑" fontSize="12"
						  icon="assets/buttonUI/white/changeStateBtn.png"/>
				<s:Button id="outputScriptBtn" x="115" y="152" width="30" height="30" label="输出代码"
						  fontFamily="微软雅黑" fontSize="12" icon="assets/buttonUI/white/outputScriptBtn.png"
						  click="outputScript(event)"/>
				<s:Button id="inputScriptBtn" x="150" y="152" width="30" height="30"
						  click="showInputWin(event)" fontFamily="微软雅黑" fontSize="12"
						  icon="assets/buttonUI/white/inputScriptBtn.png" label="导入代码"/>
				<s:DropDownList id="scriptModeSelect" x="185" y="160" width="95" height="22"
								dataProvider="{scriptModeList}" dropShadowVisible="false"
								fontFamily="微软雅黑" labelField="label" prompt="代码样式" selectedIndex="0"/>
				<s:Label x="10" y="210" text="图层操作" fontFamily="微软雅黑" fontSize="12"/>
				<mx:HRule x="10" y="225" width="60%"/>
				<s:CheckBox id="ifNoteBox" x="154" y="190" label="输出时有图层名信息(可导入)" selected="true"
							styleName="ifNoteBox" 
							fontFamily="微软雅黑" fontSize="11"
							layoutDirection="rtl"/>
				<s:Button id="addLayerBtn" x="80" y="231" width="30" height="30" label="添加图层"
						  fontFamily="微软雅黑" fontSize="12" click="createLayHandler(event)" 
						  icon="assets/buttonUI/white/addLayerBtn.png" toolTip="添加图层&#13;快捷键N"/>
				<s:Button id="delLayerBtn" x="115" y="231" width="30" height="30" label="删除图层"
						   fontFamily="微软雅黑" fontSize="12" toolTip="删除图层&#13;快捷键DEL"
						  icon="assets/buttonUI/white/delLayerBtn.png"
						  click="DelWinHandler(event)"/>
				<s:Button id="upLayerBtn" x="150" y="231" width="30" height="30" label="上移图层"
						  fontFamily="微软雅黑" fontSize="12" click="upLayer(event)" toolTip="上移图层&#13;快捷键Ctrl+↑"
						  icon="assets/buttonUI/white/upLayerBtn.png"/>
				<s:Button id="downLayerBtn" x="185" y="231" width="30" height="30" label="下移图层"
						  fontFamily="微软雅黑" fontSize="12" click="downLayer(event)"  toolTip="下移图层&#13;快捷键Ctrl+↓"
						  icon="assets/buttonUI/white/downLayerBtn.png"/>
				<s:DropDownList id="modeSelect" x="10" y="236" width="65" height="22"
								dataProvider="{modeList}" dropShadowVisible="false"
								fontFamily="微软雅黑" labelField="label" prompt="模式" selectedIndex="0"/>
			</s:NavigatorContent>
			<s:NavigatorContent width="100%" height="100%" label="实验室">
				<s:Label text="视频边框大小" fontFamily="微软雅黑" fontSize="12" x="9" y="10"/>
				<s:TextInput id="canvasBorderWidth" x="85" y="7" width="35" height="17" text="540" restrict="0123456789"
							 maxChars="4" fontFamily="微软雅黑" fontSize="12" textAlign="right" paddingTop="2" />
				<s:TextInput id="canvasBorderHeight" x="130" y="7" width="35" height="17" fontFamily="微软雅黑" fontSize="12"
							 maxChars="4" paddingTop="2" restrict="0123456789" text="384" textAlign="right"/>
				<s:Label text="x" fontFamily="微软雅黑" fontSize="12" x="122" y="10"/>
				<s:Label text="R" x="9" y="30" fontFamily="微软雅黑" fontSize="12"/>
				<s:Label text="G" x="9" y="45" fontFamily="微软雅黑" fontSize="12"/>
				<s:Label text="B" x="9" y="60" fontFamily="微软雅黑" fontSize="12"/>
				<s:HSlider id="bckColorR" x="22" y="30" liveDragging="true" maximum="255" minimum="0" stepSize="1" value="255" change="backGroundColor()"/>
				<s:HSlider id="bckColorG" x="22" y="45" liveDragging="true" maximum="255" minimum="0" stepSize="1" value="255" change="backGroundColor()"/>
				<s:HSlider id="bckColorB" x="22" y="60" liveDragging="true" maximum="255" minimum="0" stepSize="1" value="255" change="backGroundColor()"/>
				<s:Button id="loadSvgBtn" x="10" y="79" width="30"
						  height="30" label="读取SVG矢量图" click="loadSvgHandler()"
						 doubleClickEnabled="true" fontFamily="微软雅黑" visible="false"
						  fontSize="12" icon="assets/buttonUI/white/loadScriptBtn.png"/>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:BorderContainer>
	<!--图层列表-->
	<s:DataGrid id="layerBox" right="10" top="320" bottom="12" width="330"
				caretChange="changeLayerFocus(event)" editable="false" fontFamily="微软雅黑"
				fontSize="12" horizontalScrollPolicy="on" resizableColumns="true" rowHeight="22"
				sortableColumns="false"
				chromeColor="#F2F2F2">
		<s:columns>
			<s:ArrayCollection>
				<s:GridColumn width="30" labelFunction="GridIndex"/>
				<s:GridColumn width="20" dataField="visible" headerText="可见">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import mx.events.FlexEvent;
										public function visibleChanged(event:Event):void
										{
											data.visible=visibleCheckBox.selected;
											this.parentApplication.shapeArr[data.index].visible = data.visible;
											this.parentApplication.refreshLayerData(data.index,"visible",data.visible);
										}
										
									]]>
								</fx:Script>
								<s:CheckBox id="visibleCheckBox" verticalCenter="0" horizontalCenter="0" click="visibleChanged(event)" selected="{data.visible}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="NameColumn" headerText="图层名" width="60">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										public function valueChanged( event:Event ):void
										{
											data.name = nameValue.text;
											this.parentApplication.refreshLayerData(data.index,"name",data.name);
											nameValue.editable = false;
											nameValue.setStyle("contentBackgroundAlpha",0);
										}
										public function canBeEdit(event:Event):void
										{
											if( !nameValue.editable )
											{
											nameValue.editable = true;
											nameValue.setStyle( "contentBackgroundAlpha", 1);
											}else//以下为enter键事件的副本
											{
												data.name = nameValue.text;
												this.parentApplication.refreshLayerData(data.index,"name",data.name);
												nameValue.editable = false;
												nameValue.setStyle( "contentBackgroundAlpha" , 0);
											}
										}
									]]>
								</fx:Script>
								<s:TextInput id="nameValue" verticalCenter="0" horizontalCenter="0" height="100%" width="100%" contentBackgroundAlpha="0" 
											 borderVisible="false" fontSize="12" fontFamily="微软雅黑" textAlign="center" editable="false" 
											 text="{data.name}" enter="valueChanged(event)" doubleClick="canBeEdit(event)"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="fillColor" headerText="填充色" width="35">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import mx.events.ColorPickerEvent;
										public function colorChanged(event:ColorPickerEvent):void
										{
											data.fillColor=event.color;
											fillColorPicker.selectedColor=event.color;
											this.parentApplication.refreshLayerData(data.index,"fillColor",data.fillColor);
										}
										public function checkMode(mode:Number):Boolean
										{
											var boolean:Boolean;
											if(mode == 0){boolean=true;}else{boolean=false;}
											return boolean;
										}
									]]>
								</fx:Script>
								<mx:ColorPicker id="fillColorPicker" width="28" height="20" verticalCenter="0" horizontalCenter="0" overSkin="@Embed('assets/c3.png')" skin="@Embed('assets/c1.png')"
												doubleClickEnabled="true" doubleClick="this.parentApplication.beginGetColor()" selectedColor="{data.fillColor}" change="colorChanged(event)" enabled="{checkMode(data.mode)}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="fillAlpha" headerText="Alpha" width="40">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										public function valueChanged(event:Event):void
										{
											data.fillAlpha=Number(fillAlphaValue.text);
											if(data.fillAlpha>1){data.fillAlpha=1}else if(data.fillAlpha<0){data.fillAlpha=0}
											fillAlphaValue.text=data.fillAlpha.toFixed(2);
											this.parentApplication.refreshLayerData(data.index,"fillAlpha",data.fillAlpha);
											fillAlphaValue.editable = false;
											fillAlphaValue.setStyle( "contentBackgroundAlpha" , 0);
										}
										public function checkMode(mode:Number):Boolean{
											var boolean:Boolean;
											if(mode==0){boolean=true;}else{boolean=false;}
											return boolean;
										}
										public function canBeEdit(event:Event):void
										{
											if(fillAlphaValue.text == (0).toFixed(2))
												fillAlphaValue.text = (1).toFixed(2);
											
											if( !fillAlphaValue.editable )
											{
												trace(data.fillAlpha,this.parentApplication.layerArr[data.index]._fillAlpha);
												fillAlphaValue.editable = true;
												fillAlphaValue.setStyle( "contentBackgroundAlpha", 1);
											}else//以下为enter键事件的副本
											{
												data.fillAlpha = Number(fillAlphaValue.text);
												if(data.fillAlpha>1){data.fillAlpha=1;}else if(data.fillAlpha<0){data.fillAlpha=0;}
												fillAlphaValue.text=data.fillAlpha.toFixed(2);
												this.parentApplication.refreshLayerData(data.index,"fillAlpha",data.fillAlpha);
												fillAlphaValue.editable = false;
												fillAlphaValue.setStyle( "contentBackgroundAlpha" , 0);
											}
										}
									]]>
								</fx:Script>
								<s:TextInput id="fillAlphaValue" verticalCenter="0" horizontalCenter="0" height="100%" width="100%"
											 borderVisible="false" fontSize="12" fontFamily="微软雅黑" textAlign="center" editable="false" contentBackgroundAlpha="0"
											 text="{data.fillAlpha.toFixed(2)}" enter="valueChanged(event)" restrict="0123456789." maxChars="4" 
											 doubleClick="canBeEdit(event)" enabled="{checkMode(data.mode)}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="borderColor" headerText="描边色" width="35">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import mx.events.ColorPickerEvent;
										public function colorChanged(event:ColorPickerEvent):void
										{
											data.borderColor=event.color;
											borderColorPicker.selectedColor=event.color;
											this.parentApplication.refreshLayerData(data.index,"borderColor",data.borderColor);
										}
									]]>
								</fx:Script>
								<mx:ColorPicker id="borderColorPicker" width="28" height="20" verticalCenter="0" horizontalCenter="0" 
												overSkin="@Embed('assets/c3.png')" skin="@Embed('assets/c1.png')"
												selectedColor="{data.borderColor}" change="colorChanged(event)" enter="colorChanged(event)"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="borderAlpha" headerText="Alpha" width="40">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										public function valueChanged(event:Event):void
										{
											data.borderAlpha=Number(borderAlphaValue.text);
											if(data.borderAlpha>1){data.borderAlpha=1;}else if(data.borderAlpha<0){data.borderAlpha=0;}
											borderAlphaValue.text=data.borderAlpha.toFixed(2);
											this.parentApplication.refreshLayerData(data.index,"borderAlpha",data.borderAlpha);
											borderAlphaValue.editable = false;
											borderAlphaValue.setStyle( "contentBackgroundAlpha" , 0);
										}
										public function canBeEdit(event:Event):void
										{
											if( !borderAlphaValue.editable )
											{
												borderAlphaValue.editable = true;
												borderAlphaValue.setStyle( "contentBackgroundAlpha", 1);
											}else//以下为enter键事件的副本
											{
												data.borderAlpha=Number(borderAlphaValue.text);
												if(data.borderAlpha>1){data.borderAlpha=1;}else if(data.borderAlpha<0){data.borderAlpha=0;}
												borderAlphaValue.text=data.borderAlpha.toFixed(2);
												this.parentApplication.refreshLayerData(data.index,"borderAlpha",data.borderAlpha);
												borderAlphaValue.editable = false;
												borderAlphaValue.setStyle( "contentBackgroundAlpha" , 0);
											}
										}
									]]>
								</fx:Script>
								<s:TextInput id="borderAlphaValue" verticalCenter="0" horizontalCenter="0" height="100%" width="100%"
											 borderVisible="false" fontSize="12" fontFamily="微软雅黑" textAlign="center" editable="false" contentBackgroundAlpha="0"
											 text="{data.borderAlpha.toFixed(2)}" enter="valueChanged(event)" restrict="0123456789." maxChars="4" 
											 doubleClick="canBeEdit(event)"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="thickness" headerText="粗细" width="40">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import mx.events.NumericStepperEvent;
										public function valueChanged(event:NumericStepperEvent):void
										{
											data.thickness = int(thicknessValue.value);
											if(data.thickness < 0)
												data.thickness=1;
											this.parentApplication.refreshLayerData(data.index,"thickness",data.thickness);
										}
									]]>
								</fx:Script>
								<mx:NumericStepper id="thicknessValue" width="40" height="22" change="valueChanged(event)" maxChars="2"
												   maximum="99" minimum="1" stepSize="1" value="1"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="mode" headerText="模式">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										public function modeIdentify(i:Number):String{
											var  str:String;
											if(data.mode==0){str="填充"}else if(data.mode==1){str="线条"}
											return str;
										}
									]]>
								</fx:Script>
								<s:Label id="modeValue" verticalCenter="0" horizontalCenter="0" fontSize="12" fontFamily="微软雅黑"
										 text="{modeIdentify(data.mode)}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayCollection>
		</s:columns>
		<s:ArrayCollection id="layerList"></s:ArrayCollection>
	</s:DataGrid>
</s:Application>
