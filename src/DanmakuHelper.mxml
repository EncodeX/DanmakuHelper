<?xml version="1.0" encoding="utf-8"?>
<!--
	Mode8绘图助手
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:c="assets.components.*"
			   minWidth="960" minHeight="510" backgroundColor="#F2F2F2" 
			   creationComplete="init(event)" currentState="draw" pageTitle="Mode8绘图助手">
	<fx:Style source="style.css"/>
	<s:states>
		<s:State name="draw"/>
		<s:State name="script"/>
	</s:states>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<!--AS3 Script-->
	<fx:Script source="assets/manager/layerFunc.as"/>
	<fx:Script source="assets/manager/imgFunc.as"/>
	<fx:Script source="assets/manager/drawFunc.as"/>
	<fx:Script source="assets/manager/keyFunc.as"/>
	<fx:Script source="assets/manager/fileFunc.as"/>
	<fx:Script source="assets/manager/memoryFunc.as"/>
	<fx:Script source="assets/manager/boardFunc.as"/>
	<fx:Script source="assets/manager/showInfoFunc.as"/>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			[Bindable]public var modeList:ArrayCollection=new ArrayCollection([{label:"填充",value:0},{label:"线条",value:1}]);
			[Bindable]public var scriptModeList:ArrayCollection=new ArrayCollection([{label:"drawPath",value:0},{label:"分步",value:1}]);
			[Bindable]public var isDrawPathList:ArrayCollection=new ArrayCollection([{label:"drawPath",value:0},{label:"分步",value:1}]);
			public function init(e:Event):void
			{
				liveCanvas.addChild(o.liveShape);
				canvas.addEventListener(MouseEvent.MOUSE_WHEEL,scaleCanvas);
				addEventListener(KeyboardEvent.KEY_DOWN,KeyHandler);
			}
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor id="bckColor" color="0xfbfbfb" alpha="1.0"/>
		</s:fill>
	</s:Rect>
	<!--画布区遮罩 保证只在画布内显示画布内容-->
	<s:Group id="canvasMask" left="10" right="350" top="54" bottom="12" visible.script="false">
		<s:Rect height="100%" width="100%"  >
			<s:fill>
				<s:SolidColor color="0"/>
			</s:fill>
		</s:Rect>
	</s:Group>
	<!--画布-->
	<s:Group id="canvasArea" left="10" right="350" top="54" bottom="12" mask="{canvasMask}"
			 chromeColor="#FBFBFB"
			 visible.script="false">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xfbfbfb"/>
			</s:fill>
		</s:Rect>
		<s:Group id="imageArea" x="30" y="30"><!--图片区域依旧需要嵌套一个外壳 以对应单一调整图片和整体调整画布的需求-->
			<s:Group id="imagePick">
			<s:Image id="image" x="0" y="0" width="100" height="100" scaleMode="letterbox" smooth="true"
					 smoothingQuality="high" clearOnLoad="true" fillMode="clip" alpha="{imgAlphaSlider.value}"/>
			</s:Group>
		</s:Group>
		<s:Group x="30" y="30" blendMode="difference">
			<mx:HRule left="-4" width="10"/>
			<mx:VRule top="-4" height="10"/>
		</s:Group>
		<s:Group x="30" y="30"
				 chromeColor="#Fbfbfb" contentBackgroundColor="#Fbfbfb">
			<s:Group id="canvas" x="0" y="0"
					 mouseMove.draw="mouseInfo(event)">
				<s:Rect x="-10000" y="-10000" width="20000" height="20000" alpha="0">
					<s:fill>
						<s:SolidColor color="0xfbfbfb"/>
					</s:fill>
				</s:Rect>
				<mx:UIComponent id="shapeArea" x="0" y="0"/>
				<mx:UIComponent id="liveCanvas" x="0" y="0"/>
				<s:Ellipse id="scalePoint" visible="true" x="0" y="0" width="4" height="4" alpha="0.5" blendMode="difference">
					<s:stroke>
						<s:SolidColorStroke color="0xa0d5f6" weight="1"/>
					</s:stroke>
				</s:Ellipse>

				<s:Group id="canvasBorder" x="0" y="0" width="{Number(canvasBorderWidth.text)}" 
						 height="{Number(canvasBorderHeight.text)}" enabled="false" blendMode="difference">
					<mx:HRule left="0" top="0" width="100%"  strokeColor="0x000000" />
					<mx:HRule left="0" bottom="0" width="100%"  strokeColor="0x000000" />
					<mx:VRule left="0" top="0" height="100%"  strokeColor="0x000000" />
					<mx:VRule right="0" top="0" height="100%" strokeColor="0x000000" />
				</s:Group>
				<!--锁定播放器播放窗口大小 可以考虑弄一个16:9的框来服务宽屏模式 现实验室中可以更改大小-->
			</s:Group>
		</s:Group>
	</s:Group>
	<!--用4个Rule工具做了边框 因为使用BorderContainer与其他元件有重合的时候边框会不明所以的消失 所以取此下策-->
	<mx:HRule left="10" right="350" top="54" strokeColor="0x000000" shadowColor="0x000000" visible.script="false"/>
	<mx:HRule left="10" right="350" bottom="12" strokeColor="0x000000" shadowColor="0x000000" visible.script="false"/>
	<mx:VRule left="10" top="54" bottom="12" strokeColor="0x000000" shadowColor="0x000000" visible.script="false"/>
	<mx:VRule right="350" bottom="12" top="54" strokeColor="0x000000" shadowColor="0x000000" visible.script="false"/>
	
	<!--文本区-->
	<s:TextArea id="scriptArea" left="10" right="350" top="54" bottom="12"
				visible.draw="false"
				left.script="10" right.script="350" top.script="76" bottom.script="10"/>
	<s:Button id="copyBtn" includeIn="script" x="10" y="48" width="113" height="25" label="复制到剪切板"
			  click="System.setClipboard(scriptArea.text)"/>
	<s:Button includeIn="script" x="131" y="48" width="91" height="25" label="清除"
			  click="scriptArea.text=''"/>
	<!--信息区-->
	<s:Group id="infoBox" left="10" right="350" top="10" height="34">
		<s:BorderContainer width="100%" height="100%" enabled="false"/>
		<s:Label id="posInfo" includeIn="draw" y="9" right="120" fontFamily="微软雅黑" fontSize="16"
				 text="坐标信息:"/>
		<s:Label id="selectInfo" y="9" left="10"
				 enterFrame="selectInfo_enterFrameHandler(event)" fontFamily="微软雅黑"
				 fontSize="16" text="当前选中层 : "/>
		<s:Label id="toolInfo" y="9" left="127"
				 enterFrame="toolInfo_enterFrameHandler(event)" fontFamily="微软雅黑" fontSize="16"
				 text="当前工具 : "/>
		<s:Label id="helpInfo" y="9" right="10" click="help_clickHandler(event)"
				 fontFamily="微软雅黑" fontLookup="auto" fontSize="16"
				 mouseOut="changeArrowCursor(event)" mouseOver="changeBtnCursor(event)"
				 text="显示帮助信息"/>
	</s:Group>
	<!--工具区选项卡-->
	<s:TabBar id="toolBoxBar" right="10" top="10" width="330" height="20" dataProvider="{toolBox}" focusColor="#A0D5F6" fontFamily="微软雅黑"
			  fontSize="12"/>
	<!--工具区选项卡内容-->
	<s:BorderContainer right="10" top="28" width="330" height="280"
					   backgroundColor="#FBFBFB">
		<mx:ViewStack id="toolBox" width="100%" height="100%" creationPolicy="all">
			<s:NavigatorContent width="100%" height="100%" label="工具区">
				<s:Label x="10" y="9" text="图片工具" fontFamily="微软雅黑" fontSize="12"/>
				<mx:HRule x="10" y="24" width="60%"/>
				<s:Button id="loadImgBtn" x="10" y="30" width="30" height="30" label="加载图片"
						  click="getNewImg(event)" fontFamily="微软雅黑" fontSize="12"
						  icon="assets/buttonUI/white/loadImgBtn.png"/>
				<s:Button id="dragImgBtn" x="45" y="30" width="30" height="30" label="移动图片" enabled="false"
						  fontFamily="微软雅黑" fontSize="12" icon="assets/buttonUI/white/dragImgBtn.png" click="motivateTool(event)"/>
				<s:HSlider id="imgScaleSlider" x="185" y="49" width="100" liveDragging="true" enabled="false"
						   maximum="3.0" minimum="0" stepSize="0.01" value="1" change="imgScaleSliderChanged(event)"/>
				<s:HSlider id="imgAlphaSlider" x="80" y="49" width="100" liveDragging="true" enabled="false"
						   maximum="1.0" minimum="0" stepSize="0.01" value="1"/>
				<s:TextInput id="imgScaleBox" x="257" y="32" width="30" height="15" enabled="false"
							 borderVisible="false" fontFamily="微软雅黑" fontSize="12" paddingBottom="2"
							 paddingLeft="2" paddingRight="2" paddingTop="2" text="1.00" enter="imgScaleChanged(event)"
							 restrict="0123456789." maxChars="4"/>
				<s:Label x="81" y="33" fontFamily="微软雅黑" fontSize="12" text="图片Alpha"/>
				<s:Label x="184" y="33" fontFamily="微软雅黑" fontSize="12" text="图片缩放"/>
				<s:Label x="10" y="70" text="绘制工具" fontFamily="微软雅黑" fontSize="12"/>
				<mx:HRule x="10" y="85" width="60%"/>
				<s:Button id="moveBtn" x="10" y="91" width="30" height="30"
						  label="不可见直线工具" click="motivateTool(event)" enabled="false" fontFamily="微软雅黑"
						  fontSize="12" icon="assets/buttonUI/white/moveBtn.png"
						  toolTip="不可见直线工具&#13;快捷键Z"/>
				<s:Button id="lineBtn" x="43" y="91" width="30" height="30" label="直线工具"
						  click="motivateTool(event)" enabled="false" fontFamily="微软雅黑"
						  fontSize="12" icon="assets/buttonUI/white/lineBtn.png"
						  toolTip="直线工具&#13;快捷键X"/>
				<s:Button id="curveBtn2" x="78" y="91" width="30" height="30" 
						  click="motivateTool(event)" enabled="false" fontFamily="微软雅黑"
						  fontSize="12" icon="assets/buttonUI/white/curveBtn.png"
						  label="曲线工具1" toolTip="曲线工具1&#13;快捷键C"/>
				<s:Button id="curveBtn" x="112" y="91" width="30" height="30" 
						  click="motivateTool(event)" enabled="false" fontFamily="微软雅黑"
						  fontSize="12" icon="assets/buttonUI/white/curveBtn2.png"
						  label="曲线工具2" toolTip="曲线工具2&#13;快捷键V"/>
				<s:Button id="dragBtn" width="30" height="30" label="抓手工具"
						  click="motivateTool(event)" enabled="true" fontFamily="微软雅黑" fontSize="12"
						  icon="assets/buttonUI/white/dragBtn.png"
						  x="146" y="91" toolTip="画布调整&#13;快捷键D"
						  enabled.script="false"/>
				<s:Button id="undoBtn" width="30" height="30" label="撤销"
						  enabled="false" fontFamily="微软雅黑" fontSize="12" icon="assets/buttonUI/white/undoBtn.png"
						  x="181" y="91" toolTip="撤销&#13;快捷键Ctrl+Z"/>
				<s:Button id="redoBtn" width="30" height="30" label="重做"
						  enabled="false" fontFamily="微软雅黑" fontSize="12" icon="assets/buttonUI/white/redoBtn.png"
						  x="215" y="91" toolTip="重做&#13;快捷键Ctrl+Y"/>
				<s:CheckBox id="ifDragImgBox" label="图片随画布拖动" enabled="false"
							fontFamily="微软雅黑" fontSize="11" layoutDirection="rtl" selected="true"
							x="223" y="124" toolTip="图片随画布拖动"/>
				<s:Label x="10" y="131" text="其他" fontFamily="微软雅黑" fontSize="12"/>
				<mx:HRule x="10" y="146" width="60%"/>
				<s:Button id="saveScriptBtn" x="10" y="152" width="30" height="30" label="保存文本"
						  fontFamily="微软雅黑" fontSize="12" icon="assets/buttonUI/white/saveScriptBtn.png"
						  click="saveFile(event)"/>
				<s:Button id="loadsaveScriptBtn" x="45" y="152" width="30" height="30" label="读取文本"
						  click="loadTxtHandler(event)" fontFamily="微软雅黑" fontSize="12" doubleClickEnabled="true"
						  icon="assets/buttonUI/white/loadScriptBtn.png"
						  doubleClick="loadSvgHandler()"/>
				<s:Button id="changeStateBtn" x="80" y="152" width="30" height="30" label="切换绘制/代码&#13;快捷键Tab"
						  click="handleCurrentStateClick(event)" fontFamily="微软雅黑" fontSize="12"
						  icon="assets/buttonUI/white/changeStateBtn.png"/>
				<s:Button id="outputScriptBtn" x="115" y="152" width="30" height="30" label="输出代码"
						  fontFamily="微软雅黑" fontSize="12" icon="assets/buttonUI/white/outputScriptBtn.png"
						  click="outputScript(event)"/>
				<s:Button id="inputScriptBtn" x="150" y="152" width="30" height="30"
						  click="showInputWin(event)" fontFamily="微软雅黑" fontSize="12"
						  icon="assets/buttonUI/white/inputScriptBtn.png" label="导入代码"/>
				<s:DropDownList id="scriptModeSelect" x="185" y="160" width="95" height="22"
								dataProvider="{scriptModeList}" dropShadowVisible="false"
								fontFamily="微软雅黑" labelField="label" prompt="代码样式" selectedIndex="0"/>
				<s:Label x="10" y="210" text="图层操作" fontFamily="微软雅黑" fontSize="12"/>
				<mx:HRule x="10" y="225" width="60%"/>
				<s:CheckBox id="ifNoteBox" x="154" y="190" label="输出时有图层名信息(可导入)" selected="true"
							styleName="ifNoteBox" 
							fontFamily="微软雅黑" fontSize="11"
							layoutDirection="rtl"/>
				<s:Button id="addLayerBtn" x="80" y="231" width="30" height="30" label="添加图层"
						  fontFamily="微软雅黑" fontSize="12" click="createLayHandler(event)" 
						  icon="assets/buttonUI/white/addLayerBtn.png" toolTip="添加图层&#13;快捷键N"/>
				<s:Button id="delLayerBtn" x="115" y="231" width="30" height="30" label="删除图层"
						   fontFamily="微软雅黑" fontSize="12" toolTip="删除图层&#13;快捷键DEL"
						  icon="assets/buttonUI/white/delLayerBtn.png"
						  click="DelWinHandler(event)"/>
				<s:Button id="upLayerBtn" x="150" y="231" width="30" height="30" label="上移图层"
						  fontFamily="微软雅黑" fontSize="12" click="upLayer(event)" toolTip="上移图层&#13;快捷键Ctrl+↑"
						  icon="assets/buttonUI/white/upLayerBtn.png"/>
				<s:Button id="downLayerBtn" x="185" y="231" width="30" height="30" label="下移图层"
						  fontFamily="微软雅黑" fontSize="12" click="downLayer(event)"  toolTip="下移图层&#13;快捷键Ctrl+↓"
						  icon="assets/buttonUI/white/downLayerBtn.png"/>
				<s:DropDownList id="modeSelect" x="10" y="236" width="65" height="22"
								dataProvider="{modeList}" dropShadowVisible="false"
								fontFamily="微软雅黑" labelField="label" prompt="模式" selectedIndex="0"/>
			</s:NavigatorContent>
			<s:NavigatorContent width="100%" height="100%" label="实验室">
				<s:Label text="视频边框大小" fontFamily="微软雅黑" fontSize="12" x="9" y="10"/>
				<s:TextInput id="canvasBorderWidth" x="85" y="7" width="35" height="17" text="540" restrict="0123456789"
							 maxChars="4" fontFamily="微软雅黑" fontSize="12" textAlign="right" paddingTop="2" />
				<s:TextInput id="canvasBorderHeight" x="130" y="7" width="35" height="17" fontFamily="微软雅黑" fontSize="12"
							 maxChars="4" paddingTop="2" restrict="0123456789" text="384" textAlign="right"/>
				<s:Label text="x" fontFamily="微软雅黑" fontSize="12" x="122" y="10"/>
				<s:Label text="R" x="9" y="30" fontFamily="微软雅黑" fontSize="12"/>
				<s:Label text="G" x="9" y="45" fontFamily="微软雅黑" fontSize="12"/>
				<s:Label text="B" x="9" y="60" fontFamily="微软雅黑" fontSize="12"/>
				<s:HSlider id="bckColorR" x="22" y="30" liveDragging="true" maximum="255" minimum="0" stepSize="1" value="255" change="backGroundColor()"/>
				<s:HSlider id="bckColorG" x="22" y="45" liveDragging="true" maximum="255" minimum="0" stepSize="1" value="255" change="backGroundColor()"/>
				<s:HSlider id="bckColorB" x="22" y="60" liveDragging="true" maximum="255" minimum="0" stepSize="1" value="255" change="backGroundColor()"/>
				<s:Button id="loadSvgBtn" x="10" y="79" width="30"
						  height="30" label="读取SVG矢量图" click="loadSvgHandler()"
						 doubleClickEnabled="true" fontFamily="微软雅黑" 
						  fontSize="12" icon="assets/buttonUI/white/loadScriptBtn.png"/>
				<s:DropDownList id="isDrawPath" selectedIndex="0"
								x="96" y="86" width="104" height="22"
								dataProvider="{isDrawPathList}"></s:DropDownList>
				<s:Label x="46" y="92" fontSize="15" text="生成为"/>
				<s:CheckBox id="isInputSvg" label="选择导入(不稳定)" enabled="false"
							x="193" y="60"/>
				<s:TextInput id="toLimit" x="208" y="87" width="17" height="21"
							 change="scriptManager.limit=int(toLimit.text)" maxChars="1"
							 restrict="01234"
							 text="2"/>
				<s:Label x="233" y="90" fontSize="15" text="位小数点"/>
				<s:TextInput id="toFix" x="208" y="114" width="51" height="20"
							 change="scriptManager.fix=Number(toFix.text)" maxChars="5"
							 text="0.001"/>
				<s:Label fontSize="15" text="误差：" x="156" y="117"/>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:BorderContainer>
	<!--图层列表-->
	<s:DataGrid id="layerBox" right="10" top="320" bottom="12" width="330"
				caretChange="changeLayerFocus(event)" chromeColor="#F2F2F2" editable="false"
				fontFamily="微软雅黑" fontSize="12" horizontalScrollPolicy="on" resizableColumns="true"
				rowHeight="22" sortableColumns="false" >
		<s:columns>
			<s:ArrayCollection>
				<s:GridColumn width="30" labelFunction="GridIndex" resizable="false"/>
				<s:GridColumn width="20" dataField="visible" headerText="可见" resizable="false">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import mx.events.FlexEvent;
										import assets.data.*;
										public function visibleChanged(event:Event):void
										{
											data.visible=visibleCheckBox.selected;
											o.shapeArr[this.parentApplication.layerBox.selectedIndex].visible = data.visible;
											o.refreshLayerData(this.parentApplication.layerBox.selectedIndex,"visible",data.visible);
										}
										
									]]>
								</fx:Script>
								<s:CheckBox id="visibleCheckBox" verticalCenter="0" horizontalCenter="0" click="visibleChanged(event)" selected="{data.visible}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
					<s:headerRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import spark.components.DataGrid;
										
										override public function prepare(hasBeenRecycled:Boolean):void
										{
											var items:Vector.<Object> = grid.selectedItems;
											var numItems:int = items ? items.length : 0;
											cb.selected = grid.dataProvider.length == numItems;

											owner.addEventListener("selectionChange", selectionChangeHandler);
										}
										
										override public function discard(willBeRecycled:Boolean):void
										{
											owner.removeEventListener("selectionChange", selectionChangeHandler);											
										}
										
										private function selectionChangeHandler(event:Event):void
										{
											var items:Vector.<Object> = grid.selectedItems;
											var numItems:int = items ? items.length : 0;
											cb.selected = grid.dataProvider.length == numItems;
										//	cb.partial = numItems > 0;
										}
										
										private function cbChanged():void
										{
											if (!cb.selected)
											{
												// uncheck everything
												//DataGrid(owner).selectedIndex = -1;
												return;
											}
											else
											{
												
												var n:int = DataGrid(owner).dataProvider.length;
												var arr:Array = [];
												for (var i:int = 0; i < n; i++)
												{
													arr.push(i);
												}
												
											}
										}
									]]>
								</fx:Script>
								<s:CheckBox id="cb" change="cbChanged()"  verticalCenter="0" horizontalCenter="0" />
							</s:GridItemRenderer>
						</fx:Component>
					</s:headerRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="NameColumn" headerText="图层名" width="60">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import assets.data.*;
										public function valueChanged( event:Event ):void
										{
											data.name = nameValue.text;
											o.refreshLayerData(this.parentApplication.layerBox.selectedIndex,"name",data.name);
											nameValue.editable = false;
											nameValue.setStyle("contentBackgroundAlpha",0);
										}
										public function canBeEdit(event:Event):void
										{
											if( !nameValue.editable )
											{
											nameValue.editable = true;
											nameValue.setStyle( "contentBackgroundAlpha", 1);
											}else
											{
												data.name = nameValue.text;
												o.refreshLayerData(this.parentApplication.layerBox.selectedIndex,"name",data.name);
												nameValue.editable = false;
												nameValue.setStyle( "contentBackgroundAlpha" , 0);
											}
										}
									]]>
								</fx:Script>
								<s:TextInput id="nameValue" verticalCenter="0" horizontalCenter="0" height="100%" width="100%" contentBackgroundAlpha="0" 
											 borderVisible="false" fontSize="12" fontFamily="微软雅黑" textAlign="center" editable="false" 
											 text="{data.name}" enter="valueChanged(event)" doubleClick="canBeEdit(event)"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="fillColor" headerText="填充色" width="35">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import mx.events.ColorPickerEvent;
										import assets.data.*;
										public function colorChanged(event:ColorPickerEvent):void
										{
											data.fillColor=event.color;
											fillColorPicker.selectedColor=event.color;
											o.refreshLayerData(this.parentApplication.layerBox.selectedIndex,"fillColor",data.fillColor);
										}
										public function checkMode(mode:Number):Boolean
										{
											var boolean:Boolean;
											if(mode == 0){boolean=true;}else{boolean=false;}
											return boolean;
										}
									]]>
								</fx:Script>
								<mx:ColorPicker id="fillColorPicker" width="28" height="20" verticalCenter="0" horizontalCenter="0" overSkin="@Embed('assets/c3.png')" skin="@Embed('assets/c1.png')"
												doubleClickEnabled="true" doubleClick="this.parentApplication.beginGetColor()" selectedColor="{data.fillColor}" change="colorChanged(event)" enabled="{checkMode(data.mode)}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="fillAlpha" headerText="Alpha" width="40">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import assets.data.*;
										public function valueChanged(event:Event):void
										{
											data.fillAlpha=Number(fillAlphaValue.text);
											if(data.fillAlpha>1){data.fillAlpha=1}else if(data.fillAlpha<0){data.fillAlpha=0}
											fillAlphaValue.text=data.fillAlpha.toFixed(2);
											o.refreshLayerData(this.parentApplication.layerBox.selectedIndex,"fillAlpha",data.fillAlpha);
											fillAlphaValue.editable = false;
											fillAlphaValue.setStyle( "contentBackgroundAlpha" , 0);
										}
										public function checkMode(mode:Number):Boolean{
											var boolean:Boolean;
											if(mode==0){boolean=true;}else{boolean=false;}
											return boolean;
										}
										public function canBeEdit(event:Event):void
										{
											if(fillAlphaValue.text == (0).toFixed(2))
												fillAlphaValue.text = (1).toFixed(2);
											
											if( !fillAlphaValue.editable )
											{
												trace(data.fillAlpha,o.layerArr[this.parentApplication.layerBox.selectedIndex]._fillAlpha);
												fillAlphaValue.editable = true;
												fillAlphaValue.setStyle( "contentBackgroundAlpha", 1);
											}else
											{
												data.fillAlpha = Number(fillAlphaValue.text);
												if(data.fillAlpha>1){data.fillAlpha=1;}else if(data.fillAlpha<0){data.fillAlpha=0;}
												fillAlphaValue.text=data.fillAlpha.toFixed(2);
												o.refreshLayerData(this.parentApplication.layerBox.selectedIndex,"fillAlpha",data.fillAlpha);
												fillAlphaValue.editable = false;
												fillAlphaValue.setStyle( "contentBackgroundAlpha" , 0);
											}
										}
									]]>
								</fx:Script>
								<s:TextInput id="fillAlphaValue" verticalCenter="0" horizontalCenter="0" height="100%" width="100%"
											 borderVisible="false" fontSize="12" fontFamily="微软雅黑" textAlign="center" editable="false" contentBackgroundAlpha="0"
											 text="{data.fillAlpha.toFixed(2)}" enter="valueChanged(event)" restrict="0123456789." maxChars="4" 
											 doubleClick="canBeEdit(event)" enabled="{checkMode(data.mode)}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="borderColor" headerText="描边色" width="35">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import assets.data.*;
										import mx.events.ColorPickerEvent;
										public function colorChanged(event:ColorPickerEvent):void
										{
											data.borderColor=event.color;
											borderColorPicker.selectedColor=event.color;
											o.refreshLayerData(this.parentApplication.layerBox.selectedIndex,"borderColor",data.borderColor);
										}
									]]>
								</fx:Script>
								<mx:ColorPicker id="borderColorPicker" width="28" height="20" verticalCenter="0" horizontalCenter="0" 
												overSkin="@Embed('assets/c3.png')" skin="@Embed('assets/c1.png')"
												selectedColor="{data.borderColor}" change="colorChanged(event)" enter="colorChanged(event)"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="borderAlpha" headerText="Alpha" width="40">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import assets.data.*;
										public function valueChanged(event:Event):void
										{
											data.borderAlpha=Number(borderAlphaValue.text);
											if(data.borderAlpha>1){data.borderAlpha=1;}else if(data.borderAlpha<0){data.borderAlpha=0;}
											borderAlphaValue.text=data.borderAlpha.toFixed(2);
											o.refreshLayerData(this.parentApplication.layerBox.selectedIndex,"borderAlpha",data.borderAlpha);
											borderAlphaValue.editable = false;
											borderAlphaValue.setStyle( "contentBackgroundAlpha" , 0);
										}
										public function canBeEdit(event:Event):void
										{
											if( !borderAlphaValue.editable )
											{
												borderAlphaValue.editable = true;
												borderAlphaValue.setStyle( "contentBackgroundAlpha", 1);
											}else
											{
												data.borderAlpha=Number(borderAlphaValue.text);
												if(data.borderAlpha>1){data.borderAlpha=1;}else if(data.borderAlpha<0){data.borderAlpha=0;}
												borderAlphaValue.text=data.borderAlpha.toFixed(2);
												o.refreshLayerData(this.parentApplication.layerBox.selectedIndex,"borderAlpha",data.borderAlpha);
												borderAlphaValue.editable = false;
												borderAlphaValue.setStyle( "contentBackgroundAlpha" , 0);
											}
										}
									]]>
								</fx:Script>
								<s:TextInput id="borderAlphaValue" verticalCenter="0" horizontalCenter="0" height="100%" width="100%"
											 borderVisible="false" fontSize="12" fontFamily="微软雅黑" textAlign="center" editable="false" contentBackgroundAlpha="0"
											 text="{data.borderAlpha.toFixed(2)}" enter="valueChanged(event)" restrict="0123456789." maxChars="4" 
											 doubleClick="canBeEdit(event)"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="thickness" headerText="粗细" width="40">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import mx.events.NumericStepperEvent;
										import assets.data.*;
										public function valueChanged(event:NumericStepperEvent):void
										{
											data.thickness = int(thicknessValue.value);
											if(data.thickness < 0)
												data.thickness=1;
											o.refreshLayerData(this.parentApplication.layerBox.selectedIndex,"thickness",data.thickness);
										}
									]]>
								</fx:Script>
								<mx:NumericStepper id="thicknessValue" width="40" height="22" change="valueChanged(event)" maxChars="2"
												   maximum="99" minimum="1" stepSize="1" value="1"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="mode" headerText="模式">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										public function modeIdentify(i:Number):String{
											var  str:String;
											if(data.mode==0){str="填充"}else if(data.mode==1){str="线条"}
											return str;
										}
									]]>
								</fx:Script>
								<s:Label id="modeValue" verticalCenter="0" horizontalCenter="0" fontSize="12" fontFamily="微软雅黑"
										 text="{modeIdentify(data.mode)}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayCollection>
		</s:columns>
		<s:ArrayCollection id="layerList"></s:ArrayCollection>
	</s:DataGrid>
</s:Application>
